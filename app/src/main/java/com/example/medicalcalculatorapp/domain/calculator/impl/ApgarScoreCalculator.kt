package com.example.medicalcalculatorapp.domain.calculator.impl

import com.example.medicalcalculatorapp.domain.calculator.Calculator
import com.example.medicalcalculatorapp.domain.calculator.Reference
import com.example.medicalcalculatorapp.domain.calculator.ValidationResult
import com.example.medicalcalculatorapp.domain.model.CalculationResult

class ApgarScoreCalculator : Calculator {

    override val calculatorId = "apgar_score"

    // APGAR scoring criteria definitions
    private val appearanceScores = mapOf(
        0 to "Cianosis generalizada o palidez",
        1 to "Extremidades cian√≥ticas, cuerpo rosado",
        2 to "Rosado completamente"
    )

    private val pulseScores = mapOf(
        0 to "Ausente",
        1 to "Menos de 100 lpm",
        2 to "M√°s de 100 lpm"
    )

    private val grimaceScores = mapOf(
        0 to "Sin respuesta",
        1 to "Mueca o d√©bil",
        2 to "Llanto vigoroso"
    )

    private val activityScores = mapOf(
        0 to "Fl√°cido",
        1 to "Flexi√≥n m√≠nima de extremidades",
        2 to "Movimientos activos"
    )

    private val respiratoryScores = mapOf(
        0 to "Ausente",
        1 to "D√©bil o irregular",
        2 to "Llanto fuerte"
    )

    override fun validate(inputs: Map<String, String>): ValidationResult {
        val errors = mutableListOf<String>()

        // Validate all 5 APGAR criteria
        val requiredFields = listOf(
            "appearance_color" to "Apariencia (color)",
            "pulse_heart_rate" to "Pulso",
            "grimace_reflex" to "Gesticulaci√≥n",
            "activity_muscle_tone" to "Actividad",
            "respiratory_effort" to "Respiraci√≥n"
        )

        for ((field, displayName) in requiredFields) {
            val valueStr = inputs[field]
            if (valueStr.isNullOrBlank()) {
                errors.add("$displayName es obligatorio")
            } else {
                val value = extractScoreFromOption(valueStr)
                if (value == null || value !in 0..2) {
                    errors.add("$displayName debe tener una puntuaci√≥n v√°lida (0-2)")
                }
            }
        }

        // Validate evaluation time
        val evaluationTime = inputs["evaluation_time"]
        if (evaluationTime.isNullOrBlank()) {
            errors.add("El tiempo de evaluaci√≥n es obligatorio")
        }

        // Validate optional fields if provided
        val gestationalAgeStr = inputs["gestational_age"]
        if (!gestationalAgeStr.isNullOrBlank()) {
            val gestationalAge = gestationalAgeStr.toDoubleOrNull()
            if (gestationalAge == null || gestationalAge < 20 || gestationalAge > 44) {
                errors.add("La edad gestacional debe estar entre 20-44 semanas")
            }
        }

        val birthWeightStr = inputs["birth_weight"]
        if (!birthWeightStr.isNullOrBlank()) {
            val birthWeight = birthWeightStr.toDoubleOrNull()
            if (birthWeight == null || birthWeight < 500 || birthWeight > 6000) {
                errors.add("El peso al nacer debe estar entre 500-6000 gramos")
            }
        }

        return ValidationResult(
            isValid = errors.isEmpty(),
            errors = errors
        )
    }

    override fun calculate(inputs: Map<String, String>): CalculationResult {
        val validation = validate(inputs)
        if (!validation.isValid) {
            throw IllegalArgumentException(validation.errors.joinToString("; "))
        }

        // Parse APGAR scores
        val appearance = extractScoreFromOption(inputs["appearance_color"]!!)!!
        val pulse = extractScoreFromOption(inputs["pulse_heart_rate"]!!)!!
        val grimace = extractScoreFromOption(inputs["grimace_reflex"]!!)!!
        val activity = extractScoreFromOption(inputs["activity_muscle_tone"]!!)!!
        val respiratory = extractScoreFromOption(inputs["respiratory_effort"]!!)!!

        // Calculate total score
        val totalScore = appearance + pulse + grimace + activity + respiratory

        // Parse additional information
        val evaluationTime = inputs["evaluation_time"] ?: "1 minuto"
        val gestationalAge = inputs["gestational_age"]?.toDoubleOrNull()
        val birthWeight = inputs["birth_weight"]?.toDoubleOrNull()
        val deliveryType = inputs["delivery_type"] ?: "Vaginal espont√°neo"
        val maternalComplications = inputs["maternal_complications"] == "true"
        val multipleBirth = inputs["multiple_birth"] == "true"
        val resuscitationNeeded = inputs["resuscitation_needed"] == "true"

        // Determine clinical status
        val clinicalStatus = determineClinicalStatus(totalScore)
        val clinicalInterpretation = interpretClinicalStatus(
            totalScore, clinicalStatus, evaluationTime, gestationalAge, birthWeight
        )

        // Generate detailed assessment
        val detailedAssessment = generateDetailedAssessment(
            appearance, pulse, grimace, activity, respiratory, evaluationTime
        )

        // Generate immediate actions
        val immediateActions = generateImmediateActions(
            totalScore, clinicalStatus, evaluationTime, resuscitationNeeded
        )

        // Generate monitoring protocol
        val monitoringProtocol = generateMonitoringProtocol(
            totalScore, evaluationTime, gestationalAge, birthWeight, deliveryType
        )

        // Generate prognostic indicators
        val prognosticIndicators = generatePrognosticIndicators(
            totalScore, gestationalAge, birthWeight, maternalComplications, multipleBirth
        )

        // Generate follow-up recommendations
        val followUpRecommendations = generateFollowUpRecommendations(
            totalScore, gestationalAge, birthWeight, deliveryType, resuscitationNeeded
        )

        // Format results
        val results = mapOf(
            "total_score" to totalScore.toString(),
            "clinical_status" to clinicalStatus,
            "clinical_interpretation" to clinicalInterpretation,
            "detailed_assessment" to detailedAssessment,
            "immediate_actions" to immediateActions,
            "monitoring_protocol" to monitoringProtocol,
            "prognostic_indicators" to prognosticIndicators,
            "follow_up_recommendations" to followUpRecommendations
        )

        return CalculationResult(
            calculatorId = calculatorId,
            inputValues = inputs,
            resultValues = results
        )
    }

    private fun extractScoreFromOption(option: String): Int? {
        return option.split(" - ").firstOrNull()?.toIntOrNull()
    }

    private fun determineClinicalStatus(score: Int): String {
        return when (score) {
            in 7..10 -> "Buen estado"
            in 4..6 -> "Asistencia moderada"
            in 0..3 -> "Asistencia inmediata"
            else -> "Puntuaci√≥n inv√°lida"
        }
    }

    private fun interpretClinicalStatus(
        score: Int, status: String, evaluationTime: String,
        gestationalAge: Double?, birthWeight: Double?
    ): String {
        val baseInterpretation = when (status) {
            "Buen estado" -> "‚úÖ ESTADO √ìPTIMO - Reci√©n nacido con excelente adaptaci√≥n extrauterina. Signos vitales estables y respuesta neurol√≥gica adecuada."
            "Asistencia moderada" -> "üü° ASISTENCIA REQUERIDA - Reci√©n nacido con adaptaci√≥n comprometida. Requiere intervenciones de soporte y monitoreo estrecho."
            "Asistencia inmediata" -> "üö® EMERGENCIA NEONATAL - Reci√©n nacido en estado cr√≠tico. Requiere reanimaci√≥n inmediata y cuidados intensivos."
            else -> "Estado no clasificable"
        }

        val timeContext = when (evaluationTime) {
            "1 minuto" -> " Evaluaci√≥n inicial al primer minuto de vida."
            "5 minutos" -> " Evaluaci√≥n a los 5 minutos - indicador pron√≥stico importante."
            "10 minutos" -> " Evaluaci√≥n tard√≠a a los 10 minutos - seguimiento post-reanimaci√≥n."
            else -> ""
        }

        // Add gestational age context
        val gestationalContext = gestationalAge?.let { age ->
            when {
                age < 28 -> " (Extremadamente prematuro - ajustar expectativas)"
                age < 32 -> " (Muy prematuro - considerar inmadurez org√°nica)"
                age < 37 -> " (Prematuro - vigilar adaptaci√≥n respiratoria)"
                age > 42 -> " (Post√©rmino - evaluar complicaciones asociadas)"
                else -> " (A t√©rmino - expectativas normales)"
            }
        } ?: ""

        return baseInterpretation + timeContext + gestationalContext
    }

    private fun generateDetailedAssessment(
        appearance: Int, pulse: Int, grimace: Int,
        activity: Int, respiratory: Int, evaluationTime: String
    ): String {
        val assessment = mutableListOf<String>()

        assessment.add("üìä EVALUACI√ìN DETALLADA APGAR ($evaluationTime):")
        assessment.add("")

        // Appearance assessment
        assessment.add("üé® APARIENCIA - COLOR ($appearance/2):")
        assessment.add("‚Ä¢ ${appearanceScores[appearance] ?: "Valor no v√°lido"}")
        when (appearance) {
            0 -> assessment.add("‚Ä¢ üö® CIANOSIS CENTRAL - Hipoxia severa, requiere O2 inmediato")
            1 -> assessment.add("‚Ä¢ ‚ö†Ô∏è CIANOSIS PERIF√âRICA - Adaptaci√≥n circulatoria en proceso")
            2 -> assessment.add("‚Ä¢ ‚úÖ COLORACI√ìN NORMAL - Buena oxigenaci√≥n tisular")
        }
        assessment.add("")

        // Pulse assessment
        assessment.add("üíì PULSO - FRECUENCIA CARD√çACA ($pulse/2):")
        assessment.add("‚Ä¢ ${pulseScores[pulse] ?: "Valor no v√°lido"}")
        when (pulse) {
            0 -> assessment.add("‚Ä¢ üö® ASISTOLIA - Reanimaci√≥n cardiopulmonar inmediata")
            1 -> assessment.add("‚Ä¢ ‚ö†Ô∏è BRADICARDIA - Estimulaci√≥n y oxigenaci√≥n urgente")
            2 -> assessment.add("‚Ä¢ ‚úÖ FRECUENCIA ADECUADA - Funci√≥n card√≠aca estable")
        }
        assessment.add("")

        // Grimace assessment
        assessment.add("üò§ GESTICULACI√ìN - IRRITABILIDAD REFLEJA ($grimace/2):")
        assessment.add("‚Ä¢ ${grimaceScores[grimace] ?: "Valor no v√°lido"}")
        when (grimace) {
            0 -> assessment.add("‚Ä¢ üö® SIN REFLEJOS - Depresi√≥n neurol√≥gica severa")
            1 -> assessment.add("‚Ä¢ ‚ö†Ô∏è RESPUESTA D√âBIL - Depresi√≥n neurol√≥gica leve-moderada")
            2 -> assessment.add("‚Ä¢ ‚úÖ RESPUESTA VIGOROSA - Funci√≥n neurol√≥gica adecuada")
        }
        assessment.add("")

        // Activity assessment
        assessment.add("üí™ ACTIVIDAD - TONO MUSCULAR ($activity/2):")
        assessment.add("‚Ä¢ ${activityScores[activity] ?: "Valor no v√°lido"}")
        when (activity) {
            0 -> assessment.add("‚Ä¢ üö® HIPOTON√çA SEVERA - Depresi√≥n del sistema nervioso central")
            1 -> assessment.add("‚Ä¢ ‚ö†Ô∏è HIPOTON√çA LEVE - Adaptaci√≥n neurol√≥gica en proceso")
            2 -> assessment.add("‚Ä¢ ‚úÖ TONO NORMAL - Desarrollo neuromuscular adecuado")
        }
        assessment.add("")

        // Respiratory assessment
        assessment.add("ü´Å RESPIRACI√ìN - ESFUERZO RESPIRATORIO ($respiratory/2):")
        assessment.add("‚Ä¢ ${respiratoryScores[respiratory] ?: "Valor no v√°lido"}")
        when (respiratory) {
            0 -> assessment.add("‚Ä¢ üö® APNEA - Ventilaci√≥n asistida inmediata")
            1 -> assessment.add("‚Ä¢ ‚ö†Ô∏è RESPIRACI√ìN IRREGULAR - Estimulaci√≥n y ox√≠geno suplementario")
            2 -> assessment.add("‚Ä¢ ‚úÖ RESPIRACI√ìN VIGOROSA - Funci√≥n pulmonar establecida")
        }

        return assessment.joinToString("\n")
    }

    private fun generateImmediateActions(
        score: Int, status: String, evaluationTime: String, resuscitationNeeded: Boolean
    ): String {
        val actions = mutableListOf<String>()

        actions.add("üö® ACCIONES INMEDIATAS REQUERIDAS:")
        actions.add("")

        when (status) {
            "Buen estado" -> {
                actions.add("‚úÖ CUIDADOS DE RUTINA:")
                actions.add("‚Ä¢ Secar y abrigar al reci√©n nacido")
                actions.add("‚Ä¢ Contacto piel a piel con la madre")
                actions.add("‚Ä¢ Pinzamiento tard√≠o del cord√≥n (1-3 minutos)")
                actions.add("‚Ä¢ Iniciar lactancia materna en la primera hora")
                actions.add("‚Ä¢ Aplicar vitamina K intramuscular")
                actions.add("‚Ä¢ Profilaxis ocular (eritromicina)")
                actions.add("‚Ä¢ Identificaci√≥n y registro del neonato")
            }

            "Asistencia moderada" -> {
                actions.add("üü° INTERVENCIONES DE SOPORTE:")
                actions.add("‚Ä¢ Secar vigorosamente y proporcionar calor")
                actions.add("‚Ä¢ Aspiraci√≥n suave de secreciones si es necesario")
                actions.add("‚Ä¢ Estimulaci√≥n t√°ctil suave")
                actions.add("‚Ä¢ Oxigenoterapia a flujo libre si cianosis persiste")
                actions.add("‚Ä¢ Monitoreo continuo de signos vitales")
                actions.add("‚Ä¢ Reevaluar APGAR a los 5 minutos")
                actions.add("‚Ä¢ Considerar CPAP nasal si dificultad respiratoria")
                actions.add("‚Ä¢ Diferir procedimientos no urgentes")
            }

            "Asistencia inmediata" -> {
                actions.add("üö® REANIMACI√ìN NEONATAL - PROTOCOLO ABC:")
                actions.add("‚Ä¢ A - AIRWAY: Posici√≥n, aspiraci√≥n, permeabilidad")
                actions.add("‚Ä¢ B - BREATHING: Ventilaci√≥n con presi√≥n positiva")
                actions.add("‚Ä¢ C - CIRCULATION: Compresiones tor√°cicas si FC <60")
                actions.add("‚Ä¢ Intubaci√≥n endotraqueal si ventilaci√≥n inefectiva")
                actions.add("‚Ä¢ Acceso vascular umbilical de emergencia")
                actions.add("‚Ä¢ Epinefrina IV/ET si bradicardia persistente")
                actions.add("‚Ä¢ Expansi√≥n de volumen si shock hipovol√©mico")
                actions.add("‚Ä¢ Traslado inmediato a UCIN")
                actions.add("‚Ä¢ Documentaci√≥n exhaustiva de la reanimaci√≥n")
            }
        }

        // Time-specific actions
        if (evaluationTime == "5 minutos" && score < 7) {
            actions.add("")
            actions.add("‚è∞ CONSIDERACIONES A LOS 5 MINUTOS:")
            actions.add("‚Ä¢ Continuar reanimaci√≥n si APGAR <7")
            actions.add("‚Ä¢ Evaluar efectividad de intervenciones")
            actions.add("‚Ä¢ Considerar causas reversibles")
            actions.add("‚Ä¢ Documentar respuesta a reanimaci√≥n")
            actions.add("‚Ä¢ Planificar cuidados intensivos neonatales")
        }

        if (resuscitationNeeded) {
            actions.add("")
            actions.add("üìã PROTOCOLO POST-REANIMACI√ìN:")
            actions.add("‚Ä¢ Monitoreo hemodin√°mico continuo")
            actions.add("‚Ä¢ Gasometr√≠a arterial")
            actions.add("‚Ä¢ Glucemia y electrolitos")
            actions.add("‚Ä¢ Radiograf√≠a de t√≥rax")
            actions.add("‚Ä¢ Evaluaci√≥n neurol√≥gica seriada")
        }

        return actions.joinToString("\n")
    }

    private fun generateMonitoringProtocol(
        score: Int, evaluationTime: String, gestationalAge: Double?,
        birthWeight: Double?, deliveryType: String
    ): String {
        val protocol = mutableListOf<String>()

        protocol.add("üìä PROTOCOLO DE MONITOREO NEONATAL:")
        protocol.add("")

        when (score) {
            in 7..10 -> {
                protocol.add("‚úÖ MONITOREO EST√ÅNDAR:")
                protocol.add("‚Ä¢ Signos vitales cada 4 horas las primeras 24h")
                protocol.add("‚Ä¢ Temperatura, respiraci√≥n, coloraci√≥n")
                protocol.add("‚Ä¢ Alimentaci√≥n y eliminaci√≥n")
                protocol.add("‚Ä¢ Peso diario")
                protocol.add("‚Ä¢ Evaluaci√≥n neurol√≥gica b√°sica")
            }

            in 4..6 -> {
                protocol.add("üü° MONITOREO INTENSIVO:")
                protocol.add("‚Ä¢ Signos vitales cada 2 horas")
                protocol.add("‚Ä¢ Monitoreo cardiorrespiratorio continuo")
                protocol.add("‚Ä¢ Saturaci√≥n de ox√≠geno continua")
                protocol.add("‚Ä¢ Glucemia cada 6 horas")
                protocol.add("‚Ä¢ Balance h√≠drico estricto")
                protocol.add("‚Ä¢ Evaluaci√≥n neurol√≥gica cada 8 horas")
                protocol.add("‚Ä¢ APGAR de seguimiento a los 10 minutos")
            }

            in 0..3 -> {
                protocol.add("üö® MONITOREO CR√çTICO:")
                protocol.add("‚Ä¢ Monitoreo hemodin√°mico invasivo")
                protocol.add("‚Ä¢ Gasometr√≠as arteriales seriadas")
                protocol.add("‚Ä¢ Presi√≥n arterial continua")
                protocol.add("‚Ä¢ Diuresis horaria")
                protocol.add("‚Ä¢ Electrolitos cada 6 horas")
                protocol.add("‚Ä¢ Evaluaci√≥n neurol√≥gica continua")
                protocol.add("‚Ä¢ Ecocardiograma funcional")
                protocol.add("‚Ä¢ EEG si convulsiones o encefalopat√≠a")
            }
        }

        // Gestational age specific monitoring
        gestationalAge?.let { age ->
            protocol.add("")
            when {
                age < 32 -> {
                    protocol.add("üë∂ MONITOREO GRAN PREMATURO:")
                    protocol.add("‚Ä¢ Apneas y bradicardias")
                    protocol.add("‚Ä¢ S√≠ndrome de dificultad respiratoria")
                    protocol.add("‚Ä¢ Hemorragia intraventricular")
                    protocol.add("‚Ä¢ Enterocolitis necrotizante")
                    protocol.add("‚Ä¢ Retinopat√≠a del prematuro")
                }

                age < 37 -> {
                    protocol.add("üë∂ MONITOREO PREMATURO:")
                    protocol.add("‚Ä¢ Dificultad respiratoria transitoria")
                    protocol.add("‚Ä¢ Hipoglucemia")
                    protocol.add("‚Ä¢ Ictericia patol√≥gica")
                    protocol.add("‚Ä¢ Problemas de termorregulaci√≥n")
                }

                age > 42 -> {
                    protocol.add("üë∂ MONITOREO POST√âRMINO:")
                    protocol.add("‚Ä¢ S√≠ndrome de aspiraci√≥n meconial")
                    protocol.add("‚Ä¢ Hipoglucemia")
                    protocol.add("‚Ä¢ Policitemia")
                    protocol.add("‚Ä¢ Insuficiencia placentaria")
                }

                else -> {}
            }
        }

        // Birth weight specific monitoring
        birthWeight?.let { weight ->
            protocol.add("")
            when {
                weight < 1500 -> {
                    protocol.add("‚öñÔ∏è MONITOREO MUY BAJO PESO:")
                    protocol.add("‚Ä¢ Hipotermia")
                    protocol.add("‚Ä¢ Hipoglucemia severa")
                    protocol.add("‚Ä¢ S√≠ndrome de dificultad respiratoria")
                    protocol.add("‚Ä¢ Conducto arterioso persistente")
                }

                weight < 2500 -> {
                    protocol.add("‚öñÔ∏è MONITOREO BAJO PESO:")
                    protocol.add("‚Ä¢ Hipoglucemia")
                    protocol.add("‚Ä¢ Dificultades de alimentaci√≥n")
                    protocol.add("‚Ä¢ P√©rdida de calor")
                }

                weight > 4000 -> {
                    protocol.add("‚öñÔ∏è MONITOREO MACROS√ìMICO:")
                    protocol.add("‚Ä¢ Hipoglucemia")
                    protocol.add("‚Ä¢ Traumatismo del parto")
                    protocol.add("‚Ä¢ Policitemia")
                }

                else -> {}
            }
        }

        return protocol.joinToString("\n")
    }

    private fun generatePrognosticIndicators(
        score: Int, gestationalAge: Double?, birthWeight: Double?,
        maternalComplications: Boolean, multipleBirth: Boolean
    ): String {
        val indicators = mutableListOf<String>()

        indicators.add("üìà INDICADORES PRON√ìSTICOS:")
        indicators.add("")

        // APGAR score prognosis
        when (score) {
            in 7..10 -> {
                indicators.add("‚úÖ PRON√ìSTICO EXCELENTE:")
                indicators.add("‚Ä¢ Adaptaci√≥n extrauterina √≥ptima")
                indicators.add("‚Ä¢ Bajo riesgo de complicaciones")
                indicators.add("‚Ä¢ Desarrollo neurol√≥gico normal esperado")
                indicators.add("‚Ä¢ Mortalidad neonatal m√≠nima (<1%)")
            }

            in 4..6 -> {
                indicators.add("üü° PRON√ìSTICO MODERADO:")
                indicators.add("‚Ä¢ Requiere vigilancia estrecha")
                indicators.add("‚Ä¢ Riesgo moderado de complicaciones")
                indicators.add("‚Ä¢ Posibles secuelas neurol√≥gicas leves")
                indicators.add("‚Ä¢ Mortalidad neonatal baja (2-5%)")
            }

            in 0..3 -> {
                indicators.add("üî¥ PRON√ìSTICO RESERVADO:")
                indicators.add("‚Ä¢ Alto riesgo de morbimortalidad")
                indicators.add("‚Ä¢ Posibles secuelas neurol√≥gicas graves")
                indicators.add("‚Ä¢ Requiere cuidados intensivos prolongados")
                indicators.add("‚Ä¢ Mortalidad neonatal significativa (15-30%)")
            }
        }

        // Gestational age impact
        gestationalAge?.let { age ->
            indicators.add("")
            indicators.add("üìÖ IMPACTO DE EDAD GESTACIONAL:")
            when {
                age < 28 -> indicators.add("‚Ä¢ Extremadamente prematuro - Supervivencia 50-80%")
                age < 32 -> indicators.add("‚Ä¢ Muy prematuro - Supervivencia 85-95%")
                age < 37 -> indicators.add("‚Ä¢ Prematuro - Supervivencia >95%")
                age > 42 -> indicators.add("‚Ä¢ Post√©rmino - Riesgo de complicaciones aumentado")
                else -> indicators.add("‚Ä¢ A t√©rmino - Pron√≥stico √≥ptimo esperado")
            }
        }

        // Birth weight impact
        birthWeight?.let { weight ->
            indicators.add("")
            indicators.add("‚öñÔ∏è IMPACTO DEL PESO AL NACER:")
            when {
                weight < 1000 -> indicators.add("‚Ä¢ Peso extremadamente bajo - Alto riesgo")
                weight < 1500 -> indicators.add("‚Ä¢ Muy bajo peso - Riesgo moderado-alto")
                weight < 2500 -> indicators.add("‚Ä¢ Bajo peso - Vigilancia aumentada")
                weight > 4500 -> indicators.add("‚Ä¢ Macrosom√≠a - Riesgo de complicaciones metab√≥licas")
                else -> indicators.add("‚Ä¢ Peso adecuado - Pron√≥stico favorable")
            }
        }

        // Additional risk factors
        if (maternalComplications) {
            indicators.add("")
            indicators.add("‚ö†Ô∏è COMPLICACIONES MATERNAS:")
            indicators.add("‚Ä¢ Aumentan riesgo de adaptaci√≥n deficiente")
            indicators.add("‚Ä¢ Requieren monitoreo m√°s intensivo")
            indicators.add("‚Ä¢ Posible necesidad de intervenciones adicionales")
        }

        if (multipleBirth) {
            indicators.add("")
            indicators.add("üë• EMBARAZO M√öLTIPLE:")
            indicators.add("‚Ä¢ Mayor riesgo de prematurez")
            indicators.add("‚Ä¢ Posible s√≠ndrome transfusor-transfundido")
            indicators.add("‚Ä¢ Competencia intrauterina por nutrientes")
        }

        return indicators.joinToString("\n")
    }

    private fun generateFollowUpRecommendations(
        score: Int, gestationalAge: Double?, birthWeight: Double?,
        deliveryType: String, resuscitationNeeded: Boolean
    ): String {
        val recommendations = mutableListOf<String>()

        recommendations.add("üìã RECOMENDACIONES DE SEGUIMIENTO:")
        recommendations.add("")

        // Score-based follow-up
        when (score) {
            in 7..10 -> {
                recommendations.add("‚úÖ SEGUIMIENTO EST√ÅNDAR:")
                recommendations.add("‚Ä¢ Control pedi√°trico a los 3-5 d√≠as")
                recommendations.add("‚Ä¢ Tamiz neonatal ampliado")
                recommendations.add("‚Ä¢ Vacunaci√≥n seg√∫n esquema nacional")
                recommendations.add("‚Ä¢ Promoci√≥n de lactancia materna exclusiva")
                recommendations.add("‚Ä¢ Evaluaci√≥n del desarrollo a los 2 meses")
            }

            in 4..6 -> {
                recommendations.add("üü° SEGUIMIENTO INTENSIFICADO:")
                recommendations.add("‚Ä¢ Control pedi√°trico en 24-48 horas")
                recommendations.add("‚Ä¢ Evaluaci√≥n neurol√≥gica a las 2 semanas")
                recommendations.add("‚Ä¢ Audiometr√≠a antes del alta")
                recommendations.add("‚Ä¢ Ecocardiograma si indicado")
                recommendations.add("‚Ä¢ Seguimiento del desarrollo mensual")
                recommendations.add("‚Ä¢ Intervenci√≥n temprana si necesario")
            }

            in 0..3 -> {
                recommendations.add("üö® SEGUIMIENTO ESPECIALIZADO:")
                recommendations.add("‚Ä¢ Neurolog√≠a pedi√°trica urgente")
                recommendations.add("‚Ä¢ Cardiolog√≠a pedi√°trica")
                recommendations.add("‚Ä¢ Programa de alto riesgo neurol√≥gico")
                recommendations.add("‚Ä¢ Resonancia magn√©tica cerebral")
                recommendations.add("‚Ä¢ Evaluaci√≥n oftalmol√≥gica")
                recommendations.add("‚Ä¢ Fisioterapia y terapia ocupacional")
                recommendations.add("‚Ä¢ Seguimiento multidisciplinario")
            }
        }

        // Gestational age specific follow-up
        gestationalAge?.let { age ->
            if (age < 37) {
                recommendations.add("")
                recommendations.add("üë∂ SEGUIMIENTO PREMATUREZ:")
                recommendations.add("‚Ä¢ Programa de seguimiento de prematuros")
                recommendations.add("‚Ä¢ Evaluaci√≥n oftalmol√≥gica (retinopat√≠a)")
                recommendations.add("‚Ä¢ Audiometr√≠a (potenciales evocados)")
                recommendations.add("‚Ä¢ Evaluaci√≥n del desarrollo corregida por edad")
                recommendations.add("‚Ä¢ Inmunizaciones seg√∫n peso y edad gestacional")
            }
        }

        // Birth weight specific follow-up
        birthWeight?.let { weight ->
            if (weight < 2500) {
                recommendations.add("")
                recommendations.add("‚öñÔ∏è SEGUIMIENTO BAJO PESO:")
                recommendations.add("‚Ä¢ Monitoreo estrecho del crecimiento")
                recommendations.add("‚Ä¢ Suplementaci√≥n nutricional si necesario")
                recommendations.add("‚Ä¢ Evaluaci√≥n del neurodesarrollo")
                recommendations.add("‚Ä¢ Prevenci√≥n de infecciones")
            }
        }

        // Resuscitation follow-up
        if (resuscitationNeeded) {
            recommendations.add("")
            recommendations.add("üö® SEGUIMIENTO POST-REANIMACI√ìN:")
            recommendations.add("‚Ä¢ Evaluaci√≥n neurol√≥gica especializada")
            recommendations.add("‚Ä¢ EEG y neuroimagen si indicado")
            recommendations.add("‚Ä¢ Programa de estimulaci√≥n temprana")
            recommendations.add("‚Ä¢ Evaluaci√≥n cardiol√≥gica")
            recommendations.add("‚Ä¢ Seguimiento pulmonar si ventilaci√≥n prolongada")
        }

        // Family support
        recommendations.add("")
        recommendations.add("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ APOYO FAMILIAR:")
        recommendations.add("‚Ä¢ Educaci√≥n sobre cuidados neonatales")
        recommendations.add("‚Ä¢ Signos de alarma para consulta inmediata")
        recommendations.add("‚Ä¢ Promoci√≥n del v√≠nculo materno-filial")
        recommendations.add("‚Ä¢ Apoyo psicol√≥gico si trauma del parto")
        recommendations.add("‚Ä¢ Grupos de apoyo para padres")

        return recommendations.joinToString("\n")
    }

    override fun getInterpretation(result: CalculationResult): String {
        val totalScore = result.resultValues["total_score"] ?: ""
        val clinicalStatus = result.resultValues["clinical_status"] ?: ""
        val evaluationTime = result.inputValues["evaluation_time"] ?: ""

        // Get individual scores
        val appearance = extractScoreFromOption(result.inputValues["appearance_color"] ?: "")
        val pulse = extractScoreFromOption(result.inputValues["pulse_heart_rate"] ?: "")
        val grimace = extractScoreFromOption(result.inputValues["grimace_reflex"] ?: "")
        val activity = extractScoreFromOption(result.inputValues["activity_muscle_tone"] ?: "")
        val respiratory = extractScoreFromOption(result.inputValues["respiratory_effort"] ?: "")

        return """
INTERPRETACI√ìN CL√çNICA - PUNTUACI√ìN APGAR

PUNTUACI√ìN TOTAL: $totalScore/10 puntos
TIEMPO DE EVALUACI√ìN: $evaluationTime
ESTADO CL√çNICO: $clinicalStatus

COMPONENTES EVALUADOS:
- Apariencia (Color): $appearance/2 puntos
- Pulso (Frecuencia Card√≠aca): $pulse/2 puntos
- Gesticulaci√≥n (Irritabilidad): $grimace/2 puntos
- Actividad (Tono Muscular): $activity/2 puntos
- Respiraci√≥n (Esfuerzo): $respiratory/2 puntos

RANGOS DE INTERPRETACI√ìN:
- 7-10 puntos: Buen estado
- 4-6 puntos: Asistencia moderada
- 0-3 puntos: Asistencia inmediata

SIGNIFICADO CL√çNICO:
La puntuaci√≥n APGAR eval√∫a la adaptaci√≥n del reci√©n nacido a la vida extrauterina. Desarrollada por la Dra. Virginia Apgar en 1952, es un predictor confiable de la necesidad de intervenci√≥n m√©dica inmediata.

EVALUACI√ìN TEMPORAL:
- 1 minuto: Refleja tolerancia al proceso del parto
- 5 minutos: Predictor de pron√≥stico neurol√≥gico
- 10 minutos: Evaluaci√≥n post-reanimaci√≥n

VALIDEZ CL√çNICA:
- Sensibilidad del 99% para identificar neonatos que requieren reanimaci√≥n
- Especificidad del 95% para descartar depresi√≥n neonatal
- Correlaci√≥n significativa con pH de cord√≥n umbilical

LIMITACIONES:
- No predice desarrollo neurol√≥gico a largo plazo por s√≠ solo
- Puede estar influenciado por medicamentos maternos
- Prematurez puede afectar algunos componentes
- Debe interpretarse en contexto cl√≠nico completo

MARCO LEGAL MEXICANO:
Basado en NOM-007-SSA2-2016 para la atenci√≥n del embarazo, parto y puerperio. Evaluaci√≥n obligatoria en todos los nacimientos en M√©xico.
        """.trimIndent()
    }

    override fun getReferences(): List<Reference> {
        return listOf(
            Reference(
                title = "NOM-007-SSA2-2016 para la atenci√≥n del embarazo, parto y puerperio",
                source = "Diario Oficial de la Federaci√≥n (DOF)",
                url = "https://dof.gob.mx"
            ),
            Reference(
                title = "Gu√≠as de Reanimaci√≥n Neonatal",
                source = "Academia Mexicana de Pediatr√≠a",
                year = 2023
            ),
            Reference(
                title = "Manual de Neonatolog√≠a",
                source = "Instituto Nacional de Perinatolog√≠a",
                year = 2022
            ),
            Reference(
                title = "A proposal for a new method of evaluation of the newborn infant",
                source = "Virginia Apgar, 1953 - Art√≠culo original",
                year = 1953
            ),
            Reference(
                title = "Protocolo de Atenci√≥n del Reci√©n Nacido",
                source = "Secretar√≠a de Salud M√©xico",
                year = 2023
            ),
            Reference(
                title = "Gu√≠a de Pr√°ctica Cl√≠nica: Prevenci√≥n, Diagn√≥stico y Tratamiento del Reci√©n Nacido con Trastorno del Ritmo y Frecuencia Respiratoria",
                source = "Instituto Mexicano del Seguro Social (IMSS)",
                year = 2022
            ),
            Reference(
                title = "Manual de Procedimientos en Sala de Partos",
                source = "Hospital General de M√©xico",
                year = 2023
            )
        )
    }
}