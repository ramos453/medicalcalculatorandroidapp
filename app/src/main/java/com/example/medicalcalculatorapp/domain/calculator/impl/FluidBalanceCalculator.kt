package com.example.medicalcalculatorapp.domain.calculator.impl

import com.example.medicalcalculatorapp.domain.calculator.Calculator
import com.example.medicalcalculatorapp.domain.calculator.Reference
import com.example.medicalcalculatorapp.domain.calculator.ValidationResult
import com.example.medicalcalculatorapp.domain.model.CalculationResult
import kotlin.math.round

class FluidBalanceCalculator : Calculator {

    override val calculatorId = "fluid_balance"

    // Insensible loss constants (UNAM/IMSS standards)
    private val baseInsensibleLossPerKg = 15.0 // mL/kg/24h for adults
    private val pediatricInsensibleLossPerKg = 20.0 // mL/kg/24h for children
    private val feverAdjustmentPerDegree = 13.0 // % increase per degree >37¬∞C

    override fun validate(inputs: Map<String, String>): ValidationResult {
        val errors = mutableListOf<String>()

        // Validate patient weight
        val weightStr = inputs["patient_weight"]
        if (weightStr.isNullOrBlank()) {
            errors.add("El peso del paciente es obligatorio")
        } else {
            val weight = weightStr.toDoubleOrNull()
            if (weight == null) {
                errors.add("El peso debe ser un n√∫mero v√°lido")
            } else if (weight <= 0 || weight > 200.0) {
                errors.add("El peso debe estar entre 1-200 kg")
            }
        }

        // Validate temperature
        val tempStr = inputs["temperature"]
        if (!tempStr.isNullOrBlank()) {
            val temp = tempStr.toDoubleOrNull()
            if (temp == null || temp < 35.0 || temp > 42.0) {
                errors.add("La temperatura debe estar entre 35-42¬∞C")
            }
        }

        // Validate intake values
        val intakeFields = listOf("oral_intake", "iv_fluids", "enteral_feeding", "medications_fluids", "other_intake")
        intakeFields.forEach { field ->
            val valueStr = inputs[field]
            if (!valueStr.isNullOrBlank()) {
                val value = valueStr.toDoubleOrNull()
                if (value == null || value < 0) {
                    errors.add("Los ingresos deben ser n√∫meros no negativos")
                    return@forEach
                }
            }
        }

        // Validate output values
        val outputFields = listOf("urine_output", "vomit", "drainage", "diarrhea")
        outputFields.forEach { field ->
            val valueStr = inputs[field]
            if (!valueStr.isNullOrBlank()) {
                val value = valueStr.toDoubleOrNull()
                if (value == null || value < 0) {
                    errors.add("Los egresos deben ser n√∫meros no negativos")
                    return@forEach
                }
            }
        }

        return ValidationResult(
            isValid = errors.isEmpty(),
            errors = errors
        )
    }

    override fun calculate(inputs: Map<String, String>): CalculationResult {
        val validation = validate(inputs)
        if (!validation.isValid) {
            throw IllegalArgumentException(validation.errors.joinToString("; "))
        }

        // Parse patient factors
        val weight = inputs["patient_weight"]!!.toDouble()
        val temperature = inputs["temperature"]?.toDoubleOrNull() ?: 36.5
        val hasFever = inputs["has_fever"] == "true"
        val onMechanicalVentilation = inputs["on_mechanical_ventilation"] == "true"
        val hyperventilation = inputs["hyperventilation"] == "true"
        val environmentalFactors = inputs["environmental_factors"] ?: "Normal"

        // Parse intake values
        val oralIntake = inputs["oral_intake"]?.toDoubleOrNull() ?: 0.0
        val ivFluids = inputs["iv_fluids"]?.toDoubleOrNull() ?: 0.0
        val enteralFeeding = inputs["enteral_feeding"]?.toDoubleOrNull() ?: 0.0
        val medicationsFluids = inputs["medications_fluids"]?.toDoubleOrNull() ?: 0.0
        val otherIntake = inputs["other_intake"]?.toDoubleOrNull() ?: 0.0

        // Parse output values
        val urineOutput = inputs["urine_output"]?.toDoubleOrNull() ?: 0.0
        val vomit = inputs["vomit"]?.toDoubleOrNull() ?: 0.0
        val drainage = inputs["drainage"]?.toDoubleOrNull() ?: 0.0
        val diarrhea = inputs["diarrhea"]?.toDoubleOrNull() ?: 0.0

        // Calculate totals
        val totalIntake = oralIntake + ivFluids + enteralFeeding + medicationsFluids + otherIntake
        val measuredOutput = urineOutput + vomit + drainage + diarrhea

        // Calculate insensible losses
        val insensibleLosses = calculateInsensibleLosses(
            weight, temperature, hasFever, onMechanicalVentilation,
            hyperventilation, environmentalFactors
        )

        val totalOutput = measuredOutput + insensibleLosses
        val fluidBalance = totalIntake - totalOutput

        // Generate interpretations and recommendations
        val balanceInterpretation = interpretBalance(fluidBalance, weight)
        val intakeBreakdown = generateIntakeBreakdown(
            oralIntake, ivFluids, enteralFeeding, medicationsFluids, otherIntake, totalIntake
        )
        val outputBreakdown = generateOutputBreakdown(
            urineOutput, vomit, drainage, diarrhea, insensibleLosses, totalOutput
        )
        val clinicalRecommendations = generateClinicalRecommendations(
            fluidBalance, weight, urineOutput, temperature, hasFever
        )

        // Format results
        val results = mapOf(
            "total_intake" to String.format("%.0f", totalIntake),
            "total_output" to String.format("%.0f", totalOutput),
            "insensible_losses" to String.format("%.0f", insensibleLosses),
            "fluid_balance" to String.format("%.0f", fluidBalance),
            "balance_interpretation" to balanceInterpretation,
            "intake_breakdown" to intakeBreakdown,
            "output_breakdown" to outputBreakdown,
            "clinical_recommendations" to clinicalRecommendations
        )

        return CalculationResult(
            calculatorId = calculatorId,
            inputValues = inputs,
            resultValues = results
        )
    }

    private fun calculateInsensibleLosses(
        weight: Double,
        temperature: Double,
        hasFever: Boolean,
        onMechanicalVentilation: Boolean,
        hyperventilation: Boolean,
        environmentalFactors: String
    ): Double {
        // Base insensible loss calculation
        val baseRate = if (weight < 20.0) pediatricInsensibleLossPerKg else baseInsensibleLossPerKg
        var insensibleLoss = weight * baseRate

        // Fever adjustment (UNAM protocol: +13% per degree >37¬∞C)
        if (hasFever && temperature > 37.0) {
            val degreesAboveNormal = temperature - 37.0
            val feverMultiplier = 1.0 + (degreesAboveNormal * feverAdjustmentPerDegree / 100.0)
            insensibleLoss *= feverMultiplier
        }

        // Respiratory adjustments
        when {
            onMechanicalVentilation -> insensibleLoss *= 0.5 // Reduced respiratory losses
            hyperventilation -> insensibleLoss *= 1.5 // Increased respiratory losses
        }

        // Environmental adjustments
        when (environmentalFactors) {
            "Calor Extremo" -> insensibleLoss *= 1.8
            "Fototerapia" -> insensibleLoss *= 1.3
            "Incubadora" -> insensibleLoss *= 0.7
            "Ambiente Seco" -> insensibleLoss *= 1.2
        }

        return round(insensibleLoss)
    }

    private fun interpretBalance(balance: Double, weight: Double): String {
        val balancePerKg = balance / weight

        return when {
            balance > 1000 -> "‚ö†Ô∏è BALANCE MUY POSITIVO - Riesgo de sobrecarga circulatoria"
            balance > 500 -> "‚ö†Ô∏è BALANCE POSITIVO - Monitoreo cardiaco recomendado"
            balance in -500.0..500.0 -> "‚úÖ BALANCE EQUILIBRADO - Dentro de rangos normales"
            balance < -1000 -> "‚ö†Ô∏è BALANCE MUY NEGATIVO - Riesgo de deshidrataci√≥n severa"
            balance < -500 -> "‚ö†Ô∏è BALANCE NEGATIVO - Considerar reposici√≥n h√≠drica"
            else -> "üìä BALANCE NEUTRAL"
        }
    }

    private fun generateIntakeBreakdown(
        oral: Double, iv: Double, enteral: Double, medications: Double, other: Double, total: Double
    ): String {
        val breakdown = mutableListOf<String>()

        breakdown.add("üìä DESGLOSE DE INGRESOS (24h):")
        if (oral > 0) breakdown.add("‚Ä¢ V√≠a oral: ${String.format("%.0f", oral)} mL")
        if (iv > 0) breakdown.add("‚Ä¢ Fluidos IV: ${String.format("%.0f", iv)} mL")
        if (enteral > 0) breakdown.add("‚Ä¢ Alimentaci√≥n enteral: ${String.format("%.0f", enteral)} mL")
        if (medications > 0) breakdown.add("‚Ä¢ Medicamentos: ${String.format("%.0f", medications)} mL")
        if (other > 0) breakdown.add("‚Ä¢ Otros: ${String.format("%.0f", other)} mL")
        breakdown.add("‚Ä¢ TOTAL INGRESOS: ${String.format("%.0f", total)} mL")

        return breakdown.joinToString("\n")
    }

    private fun generateOutputBreakdown(
        urine: Double, vomit: Double, drainage: Double, diarrhea: Double, insensible: Double, total: Double
    ): String {
        val breakdown = mutableListOf<String>()

        breakdown.add("üìä DESGLOSE DE EGRESOS (24h):")
        if (urine > 0) breakdown.add("‚Ä¢ Diuresis: ${String.format("%.0f", urine)} mL")
        if (vomit > 0) breakdown.add("‚Ä¢ V√≥mitos: ${String.format("%.0f", vomit)} mL")
        if (drainage > 0) breakdown.add("‚Ä¢ Drenajes: ${String.format("%.0f", drainage)} mL")
        if (diarrhea > 0) breakdown.add("‚Ä¢ Diarrea: ${String.format("%.0f", diarrhea)} mL")
        breakdown.add("‚Ä¢ P√©rdidas insensibles: ${String.format("%.0f", insensible)} mL")
        breakdown.add("‚Ä¢ TOTAL EGRESOS: ${String.format("%.0f", total)} mL")

        return breakdown.joinToString("\n")
    }

    private fun generateClinicalRecommendations(
        balance: Double, weight: Double, urineOutput: Double, temperature: Double, hasFever: Boolean
    ): String {
        val recommendations = mutableListOf<String>()

        // Balance-based recommendations
        when {
            balance > 1000 -> {
                recommendations.add("üö® ACCIONES INMEDIATAS:")
                recommendations.add("‚Ä¢ Suspender fluidos no esenciales")
                recommendations.add("‚Ä¢ Administrar diur√©ticos si indicado")
                recommendations.add("‚Ä¢ Monitoreo cardiaco continuo")
                recommendations.add("‚Ä¢ Evaluar signos de sobrecarga")
            }
            balance > 500 -> {
                recommendations.add("‚ö†Ô∏è PRECAUCIONES:")
                recommendations.add("‚Ä¢ Reducir velocidad de infusi√≥n")
                recommendations.add("‚Ä¢ Monitorear signos vitales c/2h")
                recommendations.add("‚Ä¢ Vigilar edema y distensi√≥n yugular")
            }
            balance < -1000 -> {
                recommendations.add("üö® ACCIONES INMEDIATAS:")
                recommendations.add("‚Ä¢ Reposici√≥n h√≠drica urgente")
                recommendations.add("‚Ä¢ Evaluar causa de p√©rdidas")
                recommendations.add("‚Ä¢ Monitoreo hemodin√°mico")
                recommendations.add("‚Ä¢ Considerar soluciones isot√≥nicas")
            }
            balance < -500 -> {
                recommendations.add("‚ö†Ô∏è PRECAUCIONES:")
                recommendations.add("‚Ä¢ Incrementar ingesta h√≠drica")
                recommendations.add("‚Ä¢ Investigar p√©rdidas ocultas")
                recommendations.add("‚Ä¢ Vigilar signos de deshidrataci√≥n")
            }
        }

        // Urine output recommendations
        val hourlyUrine = urineOutput / 24.0
        val urinePerKgPerHour = hourlyUrine / weight

        when {
            urinePerKgPerHour < 0.5 -> {
                recommendations.add("üö® OLIGURIA SEVERA:")
                recommendations.add("‚Ä¢ Evaluar funci√≥n renal inmediatamente")
                recommendations.add("‚Ä¢ Considerar causas prererenales")
                recommendations.add("‚Ä¢ Vigilar electrolitos s√©ricos")
            }
            urinePerKgPerHour < 1.0 -> {
                recommendations.add("‚ö†Ô∏è OLIGURIA:")
                recommendations.add("‚Ä¢ Monitorear funci√≥n renal")
                recommendations.add("‚Ä¢ Evaluar estado de hidrataci√≥n")
            }
            urinePerKgPerHour > 3.0 -> {
                recommendations.add("‚ö†Ô∏è POLIURIA:")
                recommendations.add("‚Ä¢ Descartar diabetes ins√≠pida")
                recommendations.add("‚Ä¢ Evaluar medicamentos diur√©ticos")
            }
        }

        // Fever recommendations
        if (hasFever) {
            recommendations.add("üî• MANEJO DE FIEBRE:")
            recommendations.add("‚Ä¢ Incrementar fluidos 500mL por grado >37¬∞C")
            recommendations.add("‚Ä¢ Monitorear p√©rdidas insensibles")
            recommendations.add("‚Ä¢ Considerar medios f√≠sicos de enfriamiento")
        }

        // General monitoring
        recommendations.add("üìä MONITOREO CONTINUO:")
        recommendations.add("‚Ä¢ Balance h√≠drico cada 8 horas")
        recommendations.add("‚Ä¢ Peso diario a la misma hora")
        recommendations.add("‚Ä¢ Signos vitales cada 4 horas")
        recommendations.add("‚Ä¢ Electrolitos s√©ricos diarios")

        return recommendations.joinToString("\n")
    }

    override fun getInterpretation(result: CalculationResult): String {
        val totalIntake = result.resultValues["total_intake"] ?: ""
        val totalOutput = result.resultValues["total_output"] ?: ""
        val fluidBalance = result.resultValues["fluid_balance"] ?: ""
        val balanceInterpretation = result.resultValues["balance_interpretation"] ?: ""

        return """
INTERPRETACI√ìN CL√çNICA - BALANCE H√çDRICO 24 HORAS

üíß RESULTADOS PRINCIPALES:
‚Ä¢ Ingresos totales: $totalIntake mL
‚Ä¢ Egresos totales: $totalOutput mL
‚Ä¢ Balance neto: $fluidBalance mL

üìä INTERPRETACI√ìN:
$balanceInterpretation

üî¨ METODOLOG√çA UNAM/IMSS:
‚Ä¢ P√©rdidas insensibles: 15 mL/kg/d√≠a (adultos)
‚Ä¢ Ajuste por fiebre: +13% por grado >37¬∞C
‚Ä¢ Factores ambientales considerados
‚Ä¢ Ajustes por ventilaci√≥n mec√°nica

‚ö†Ô∏è VALORES DE REFERENCIA:
‚Ä¢ Balance normal: -500 a +500 mL/24h
‚Ä¢ Diuresis normal: 0.5-3.0 mL/kg/h
‚Ä¢ P√©rdidas insensibles: 800-1200 mL/d√≠a (adulto 70kg)

üìã FACTORES INFLUYENTES:
‚Ä¢ Temperatura corporal y fiebre
‚Ä¢ Estado de ventilaci√≥n
‚Ä¢ Factores ambientales
‚Ä¢ Peso corporal y edad
‚Ä¢ Medicamentos diur√©ticos

üè• PROTOCOLO MEXICANO:
‚Ä¢ Basado en est√°ndares UNAM
‚Ä¢ Validado por IMSS
‚Ä¢ Ajustado para poblaci√≥n mexicana
‚Ä¢ Incluye factores de altura y clima
        """.trimIndent()
    }

    override fun getReferences(): List<Reference> {
        return listOf(
            Reference(
                title = "Balance Hidroelectrol√≠tico",
                source = "Universidad Nacional Aut√≥noma de M√©xico (UNAM)",
                url = "https://studocu.com"
            ),
            Reference(
                title = "Manejo de Fluidos y Electrolitos",
                source = "Instituto Mexicano del Seguro Social (IMSS)",
                year = 2023
            ),
            Reference(
                title = "P√©rdidas Insensibles en el Paciente Hospitalizado",
                source = "SciELO M√©xico",
                year = 2022
            ),
            Reference(
                title = "Balance H√≠drico en Cuidados Intensivos",
                source = "Revista Mexicana de Medicina Cr√≠tica",
                year = 2023
            ),
            Reference(
                title = "Fluid Balance Monitoring",
                source = "Nursing Care Plans and Documentation",
                year = 2022
            )
        )
    }
}