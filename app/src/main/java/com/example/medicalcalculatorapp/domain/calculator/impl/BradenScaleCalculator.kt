// Add this import to your AppDependencies.kt file:
// import com.example.medicalcalculatorapp.domain.calculator.impl.BradenScaleCalculator

// Then add this line in your createCalculatorService() method:
// service.registerCalculator(BradenScaleCalculator())


package com.example.medicalcalculatorapp.domain.calculator.impl

import com.example.medicalcalculatorapp.domain.calculator.Calculator
import com.example.medicalcalculatorapp.domain.calculator.Reference
import com.example.medicalcalculatorapp.domain.calculator.ValidationResult
import com.example.medicalcalculatorapp.domain.model.CalculationResult

class BradenScaleCalculator : Calculator {

    override val calculatorId = "braden_scale"

    // Braden Scale item definitions with scoring options
    private val bradenItems = mapOf(
        "sensory_perception" to mapOf(
            1 to "Completamente limitada - No responde a est√≠mulos dolorosos",
            2 to "Muy limitada - Responde solo a est√≠mulos dolorosos",
            3 to "Ligeramente limitada - Responde a √≥rdenes verbales",
            4 to "Sin alteraciones - Responde a √≥rdenes verbales"
        ),
        "moisture" to mapOf(
            1 to "Constantemente h√∫meda - Piel h√∫meda constantemente",
            2 to "Muy h√∫meda - Piel h√∫meda frecuentemente",
            3 to "Ocasionalmente h√∫meda - Requiere cambio de ropa adicional",
            4 to "Raramente h√∫meda - Piel generalmente seca"
        ),
        "activity" to mapOf(
            1 to "Encamado - Confinado a la cama",
            2 to "En silla - Capacidad de caminar severamente limitada",
            3 to "Camina ocasionalmente - Camina ocasionalmente durante el d√≠a",
            4 to "Camina frecuentemente - Camina fuera de la habitaci√≥n al menos dos veces al d√≠a"
        ),
        "mobility" to mapOf(
            1 to "Completamente inm√≥vil - No hace cambios de posici√≥n",
            2 to "Muy limitada - Ocasionalmente hace cambios leves de posici√≥n",
            3 to "Ligeramente limitada - Hace cambios frecuentes pero leves",
            4 to "Sin limitaciones - Hace cambios importantes y frecuentes de posici√≥n"
        ),
        "nutrition" to mapOf(
            1 to "Muy pobre - Nunca come una comida completa",
            2 to "Probablemente inadecuada - Raramente come una comida completa",
            3 to "Adecuada - Come m√°s de la mitad de la mayor√≠a de comidas",
            4 to "Excelente - Come la mayor√≠a de cada comida"
        ),
        "friction_shear" to mapOf(
            1 to "Problema - Requiere asistencia moderada a m√°xima para moverse",
            2 to "Problema potencial - Se mueve d√©bilmente o requiere m√≠nima asistencia",
            3 to "Sin problema aparente - Se mueve en cama y silla independientemente"
        )
    )

    override fun validate(inputs: Map<String, String>): ValidationResult {
        val errors = mutableListOf<String>()

        // Validate all required fields are present
        val requiredFields = listOf(
            "sensory_perception", "moisture", "activity",
            "mobility", "nutrition", "friction_shear"
        )

        for (field in requiredFields) {
            val valueStr = inputs[field]
            if (valueStr.isNullOrBlank()) {
                errors.add("${getFieldDisplayName(field)} es obligatorio")
            } else {
                val value = valueStr.toIntOrNull()
                if (value == null) {
                    errors.add("${getFieldDisplayName(field)} debe ser un n√∫mero v√°lido")
                } else {
                    // Validate score ranges
                    val validRange = if (field == "friction_shear") 1..3 else 1..4
                    if (value !in validRange) {
                        errors.add("${getFieldDisplayName(field)} debe estar entre ${validRange.first}-${validRange.last}")
                    }
                }
            }
        }

        // Validate patient information if provided
        val ageStr = inputs["patient_age"]
        if (!ageStr.isNullOrBlank()) {
            val age = ageStr.toIntOrNull()
            if (age == null || age < 0 || age > 120) {
                errors.add("La edad debe estar entre 0-120 a√±os")
            }
        }

        return ValidationResult(
            isValid = errors.isEmpty(),
            errors = errors
        )
    }

    override fun calculate(inputs: Map<String, String>): CalculationResult {
        val validation = validate(inputs)
        if (!validation.isValid) {
            throw IllegalArgumentException(validation.errors.joinToString("; "))
        }

        // Parse inputs
        val sensoryPerception = inputs["sensory_perception"]!!.toInt()
        val moisture = inputs["moisture"]!!.toInt()
        val activity = inputs["activity"]!!.toInt()
        val mobility = inputs["mobility"]!!.toInt()
        val nutrition = inputs["nutrition"]!!.toInt()
        val frictionShear = inputs["friction_shear"]!!.toInt()

        // Patient information (optional)
        val patientAge = inputs["patient_age"]?.toIntOrNull()
        val hasChronicConditions = inputs["chronic_conditions"] == "true"
        val onBedRest = inputs["bed_rest"] == "true"
        val criticalIllness = inputs["critical_illness"] == "true"

        // Calculate total score
        val totalScore = sensoryPerception + moisture + activity + mobility + nutrition + frictionShear

        // Determine risk level
        val riskLevel = determineRiskLevel(totalScore)
        val riskInterpretation = interpretRisk(totalScore, riskLevel)

        // Generate detailed assessment
        val detailedAssessment = generateDetailedAssessment(
            sensoryPerception, moisture, activity, mobility, nutrition, frictionShear
        )

        // Generate prevention recommendations
        val preventionRecommendations = generatePreventionRecommendations(
            totalScore, riskLevel, hasChronicConditions, onBedRest, criticalIllness
        )

        // Generate monitoring schedule
        val monitoringSchedule = generateMonitoringSchedule(riskLevel, criticalIllness)

        // Generate risk factors analysis
        val riskFactorsAnalysis = analyzeRiskFactors(
            sensoryPerception, moisture, activity, mobility, nutrition, frictionShear, patientAge
        )

        // Format results
        val results = mapOf(
            "total_score" to totalScore.toString(),
            "risk_level" to riskLevel,
            "risk_interpretation" to riskInterpretation,
            "detailed_assessment" to detailedAssessment,
            "prevention_recommendations" to preventionRecommendations,
            "monitoring_schedule" to monitoringSchedule,
            "risk_factors_analysis" to riskFactorsAnalysis
        )

        return CalculationResult(
            calculatorId = calculatorId,
            inputValues = inputs,
            resultValues = results
        )
    }

    private fun getFieldDisplayName(field: String): String {
        return when (field) {
            "sensory_perception" -> "Percepci√≥n sensorial"
            "moisture" -> "Exposici√≥n a la humedad"
            "activity" -> "Actividad"
            "mobility" -> "Movilidad"
            "nutrition" -> "Nutrici√≥n"
            "friction_shear" -> "Fricci√≥n y deslizamiento"
            else -> field
        }
    }

    private fun determineRiskLevel(score: Int): String {
        return when (score) {
            in 19..23 -> "Sin riesgo"
            in 15..18 -> "Riesgo leve"
            in 13..14 -> "Riesgo moderado"
            in 10..12 -> "Riesgo alto"
            else -> "Riesgo muy alto" // ‚â§9
        }
    }

    private fun interpretRisk(score: Int, riskLevel: String): String {
        return when (riskLevel) {
            "Sin riesgo" -> "‚úÖ RIESGO M√çNIMO - Paciente con bajo riesgo de desarrollar √∫lceras por presi√≥n. Mantener cuidados preventivos b√°sicos."
            "Riesgo leve" -> "‚ö†Ô∏è RIESGO LEVE - Iniciar medidas preventivas. Evaluaci√≥n diaria y cambios posturales regulares."
            "Riesgo moderado" -> "üü° RIESGO MODERADO - Implementar protocolo de prevenci√≥n. Cambios posturales cada 2 horas y superficies de apoyo."
            "Riesgo alto" -> "üî∂ RIESGO ALTO - Protocol intensivo requerido. Cambios posturales cada 1-2 horas, colch√≥n especializado."
            "Riesgo muy alto" -> "üö® RIESGO MUY ALTO - Medidas preventivas m√°ximas. Supervisi√≥n constante, colch√≥n de presi√≥n alterna."
            else -> "Evaluaci√≥n requerida"
        }
    }

    private fun generateDetailedAssessment(
        sensory: Int, moisture: Int, activity: Int,
        mobility: Int, nutrition: Int, friction: Int
    ): String {
        val assessment = mutableListOf<String>()

        assessment.add("üìä EVALUACI√ìN DETALLADA POR √ÅREA:")
        assessment.add("")

        // Analyze each component
        assessment.add("üß† PERCEPCI√ìN SENSORIAL ($sensory/4):")
        assessment.add("‚Ä¢ ${bradenItems["sensory_perception"]?.get(sensory) ?: "Valor no v√°lido"}")
        if (sensory <= 2) assessment.add("‚Ä¢ ‚ö†Ô∏è FACTOR DE ALTO RIESGO - Percepci√≥n limitada")
        assessment.add("")

        assessment.add("üíß EXPOSICI√ìN A HUMEDAD ($moisture/4):")
        assessment.add("‚Ä¢ ${bradenItems["moisture"]?.get(moisture) ?: "Valor no v√°lido"}")
        if (moisture <= 2) assessment.add("‚Ä¢ ‚ö†Ô∏è FACTOR DE RIESGO - Exposici√≥n excesiva a humedad")
        assessment.add("")

        assessment.add("üö∂ ACTIVIDAD ($activity/4):")
        assessment.add("‚Ä¢ ${bradenItems["activity"]?.get(activity) ?: "Valor no v√°lido"}")
        if (activity <= 2) assessment.add("‚Ä¢ ‚ö†Ô∏è FACTOR DE ALTO RIESGO - Actividad muy limitada")
        assessment.add("")

        assessment.add("üîÑ MOVILIDAD ($mobility/4):")
        assessment.add("‚Ä¢ ${bradenItems["mobility"]?.get(mobility) ?: "Valor no v√°lido"}")
        if (mobility <= 2) assessment.add("‚Ä¢ ‚ö†Ô∏è FACTOR DE ALTO RIESGO - Movilidad severamente limitada")
        assessment.add("")

        assessment.add("üçΩÔ∏è NUTRICI√ìN ($nutrition/4):")
        assessment.add("‚Ä¢ ${bradenItems["nutrition"]?.get(nutrition) ?: "Valor no v√°lido"}")
        if (nutrition <= 2) assessment.add("‚Ä¢ ‚ö†Ô∏è FACTOR DE RIESGO - Estado nutricional comprometido")
        assessment.add("")

        assessment.add("‚ö° FRICCI√ìN Y DESLIZAMIENTO ($friction/3):")
        assessment.add("‚Ä¢ ${bradenItems["friction_shear"]?.get(friction) ?: "Valor no v√°lido"}")
        if (friction <= 2) assessment.add("‚Ä¢ ‚ö†Ô∏è FACTOR DE RIESGO - Problemas de fricci√≥n/deslizamiento")

        return assessment.joinToString("\n")
    }

    private fun generatePreventionRecommendations(
        score: Int, riskLevel: String, hasChronicConditions: Boolean,
        onBedRest: Boolean, criticalIllness: Boolean
    ): String {
        val recommendations = mutableListOf<String>()

        recommendations.add("üõ°Ô∏è MEDIDAS PREVENTIVAS ESPEC√çFICAS:")
        recommendations.add("")

        when (riskLevel) {
            "Sin riesgo" -> {
                recommendations.add("‚úÖ CUIDADOS B√ÅSICOS:")
                recommendations.add("‚Ä¢ Inspecci√≥n de piel diaria")
                recommendations.add("‚Ä¢ Mantener piel limpia y seca")
                recommendations.add("‚Ä¢ Cambios posturales cada 4 horas")
                recommendations.add("‚Ä¢ Educaci√≥n al paciente y familia")
            }
            "Riesgo leve" -> {
                recommendations.add("‚ö†Ô∏è PREVENCI√ìN ACTIVA:")
                recommendations.add("‚Ä¢ Inspecci√≥n de piel cada turno (8 horas)")
                recommendations.add("‚Ä¢ Cambios posturales cada 3 horas")
                recommendations.add("‚Ä¢ Uso de almohadas para alivio de presi√≥n")
                recommendations.add("‚Ä¢ Mantener nutrici√≥n e hidrataci√≥n adecuada")
                recommendations.add("‚Ä¢ Protecci√≥n de prominencias √≥seas")
            }
            "Riesgo moderado" -> {
                recommendations.add("üü° PROTOCOLO INTENSIVO:")
                recommendations.add("‚Ä¢ Inspecci√≥n de piel cada 4 horas")
                recommendations.add("‚Ä¢ Cambios posturales cada 2 horas")
                recommendations.add("‚Ä¢ Colch√≥n de espuma de alta densidad")
                recommendations.add("‚Ä¢ Cojines de alivio de presi√≥n")
                recommendations.add("‚Ä¢ Evaluaci√≥n nutricional especializada")
                recommendations.add("‚Ä¢ Mantener cabecera <30¬∞ cuando sea posible")
            }
            "Riesgo alto" -> {
                recommendations.add("üî∂ PREVENCI√ìN M√ÅXIMA:")
                recommendations.add("‚Ä¢ Inspecci√≥n de piel cada 2 horas")
                recommendations.add("‚Ä¢ Cambios posturales cada 1-2 horas")
                recommendations.add("‚Ä¢ Colch√≥n de presi√≥n alterna o aire")
                recommendations.add("‚Ä¢ Superficies de apoyo especializadas")
                recommendations.add("‚Ä¢ Suplementaci√≥n nutricional si indicado")
                recommendations.add("‚Ä¢ Evitar fricci√≥n durante movilizaci√≥n")
                recommendations.add("‚Ä¢ Usar dispositivos de elevaci√≥n")
            }
            "Riesgo muy alto" -> {
                recommendations.add("üö® MEDIDAS M√ÅXIMAS:")
                recommendations.add("‚Ä¢ Inspecci√≥n continua de la piel")
                recommendations.add("‚Ä¢ Cambios posturales cada hora")
                recommendations.add("‚Ä¢ Colch√≥n de aire de presi√≥n baja")
                recommendations.add("‚Ä¢ Cama especializada si disponible")
                recommendations.add("‚Ä¢ Supervisi√≥n nutricional diaria")
                recommendations.add("‚Ä¢ Equipo multidisciplinario")
                recommendations.add("‚Ä¢ Documentaci√≥n exhaustiva")
                recommendations.add("‚Ä¢ Consulta especializada en heridas")
            }
        }

        // Additional considerations
        if (hasChronicConditions) {
            recommendations.add("")
            recommendations.add("üè• CONSIDERACIONES ESPECIALES - CONDICIONES CR√ìNICAS:")
            recommendations.add("‚Ä¢ Manejo optimizado de diabetes")
            recommendations.add("‚Ä¢ Control de enfermedades vasculares")
            recommendations.add("‚Ä¢ Evaluaci√≥n de medicamentos")
        }

        if (onBedRest) {
            recommendations.add("")
            recommendations.add("üõèÔ∏è PROTOCOLO ESPECIAL - REPOSO EN CAMA:")
            recommendations.add("‚Ä¢ Programa de movilizaci√≥n pasiva")
            recommendations.add("‚Ä¢ Ejercicios de rango de movimiento")
            recommendations.add("‚Ä¢ Fisioterapia respiratoria")
        }

        if (criticalIllness) {
            recommendations.add("")
            recommendations.add("üö® CUIDADOS CR√çTICOS:")
            recommendations.add("‚Ä¢ Monitoreo hemodin√°mico")
            recommendations.add("‚Ä¢ Manejo de sedaci√≥n y analgesia")
            recommendations.add("‚Ä¢ Prevenci√≥n de complicaciones")
        }

        return recommendations.joinToString("\n")
    }

    private fun generateMonitoringSchedule(riskLevel: String, criticalIllness: Boolean): String {
        val schedule = mutableListOf<String>()

        schedule.add("üìÖ CRONOGRAMA DE MONITOREO:")
        schedule.add("")

        when (riskLevel) {
            "Sin riesgo" -> {
                schedule.add("‚Ä¢ Evaluaci√≥n Braden: Semanal")
                schedule.add("‚Ä¢ Inspecci√≥n de piel: Diaria")
                schedule.add("‚Ä¢ Documentaci√≥n: Semanal")
            }
            "Riesgo leve" -> {
                schedule.add("‚Ä¢ Evaluaci√≥n Braden: Cada 3 d√≠as")
                schedule.add("‚Ä¢ Inspecci√≥n de piel: Cada turno (8h)")
                schedule.add("‚Ä¢ Documentaci√≥n: Cada 3 d√≠as")
                schedule.add("‚Ä¢ Revisi√≥n de medidas: Semanal")
            }
            "Riesgo moderado" -> {
                schedule.add("‚Ä¢ Evaluaci√≥n Braden: Cada 48 horas")
                schedule.add("‚Ä¢ Inspecci√≥n de piel: Cada 4 horas")
                schedule.add("‚Ä¢ Documentaci√≥n: Diaria")
                schedule.add("‚Ä¢ Revisi√≥n del plan: Cada 3 d√≠as")
            }
            "Riesgo alto" -> {
                schedule.add("‚Ä¢ Evaluaci√≥n Braden: Diaria")
                schedule.add("‚Ä¢ Inspecci√≥n de piel: Cada 2 horas")
                schedule.add("‚Ä¢ Documentaci√≥n: Cada turno")
                schedule.add("‚Ä¢ Revisi√≥n del plan: Diaria")
                schedule.add("‚Ä¢ Evaluaci√≥n nutricional: Semanal")
            }
            "Riesgo muy alto" -> {
                schedule.add("‚Ä¢ Evaluaci√≥n Braden: Cada 12 horas")
                schedule.add("‚Ä¢ Inspecci√≥n de piel: Continua")
                schedule.add("‚Ä¢ Documentaci√≥n: Cada 2 horas")
                schedule.add("‚Ä¢ Revisi√≥n del plan: Cada 12 horas")
                schedule.add("‚Ä¢ Consulta especializada: Inmediata")
            }
        }

        if (criticalIllness) {
            schedule.add("")
            schedule.add("üö® MONITOREO INTENSIVO (UCI):")
            schedule.add("‚Ä¢ Evaluaci√≥n continua durante procedures")
            schedule.add("‚Ä¢ Documentaci√≥n cada hora")
            schedule.add("‚Ä¢ Comunicaci√≥n con equipo m√©dico")
        }

        return schedule.joinToString("\n")
    }

    private fun analyzeRiskFactors(
        sensory: Int, moisture: Int, activity: Int,
        mobility: Int, nutrition: Int, friction: Int, age: Int?
    ): String {
        val analysis = mutableListOf<String>()
        val highRiskFactors = mutableListOf<String>()
        val moderateRiskFactors = mutableListOf<String>()

        // Analyze each factor
        if (sensory <= 2) highRiskFactors.add("Percepci√≥n sensorial muy limitada")
        else if (sensory == 3) moderateRiskFactors.add("Percepci√≥n sensorial ligeramente limitada")

        if (moisture <= 2) highRiskFactors.add("Exposici√≥n excesiva a humedad")
        else if (moisture == 3) moderateRiskFactors.add("Humedad ocasional")

        if (activity <= 2) highRiskFactors.add("Actividad muy limitada")
        else if (activity == 3) moderateRiskFactors.add("Actividad limitada")

        if (mobility <= 2) highRiskFactors.add("Movilidad muy limitada")
        else if (mobility == 3) moderateRiskFactors.add("Movilidad ligeramente limitada")

        if (nutrition <= 2) highRiskFactors.add("Estado nutricional comprometido")
        else if (nutrition == 3) moderateRiskFactors.add("Nutrici√≥n adecuada pero mejorable")

        if (friction <= 1) highRiskFactors.add("Problemas significativos de fricci√≥n")
        else if (friction == 2) moderateRiskFactors.add("Problemas potenciales de fricci√≥n")

        // Age factor
        age?.let {
            when {
                it >= 85 -> highRiskFactors.add("Edad muy avanzada (‚â•85 a√±os)")
                it >= 75 -> moderateRiskFactors.add("Edad avanzada (75-84 a√±os)")
                it >= 65 -> moderateRiskFactors.add("Adulto mayor (65-74 a√±os)")
                else -> {}
            }
        }

        analysis.add("üîç AN√ÅLISIS DE FACTORES DE RIESGO:")
        analysis.add("")

        if (highRiskFactors.isNotEmpty()) {
            analysis.add("üö® FACTORES DE ALTO RIESGO:")
            highRiskFactors.forEach { analysis.add("‚Ä¢ $it") }
            analysis.add("")
        }

        if (moderateRiskFactors.isNotEmpty()) {
            analysis.add("‚ö†Ô∏è FACTORES DE RIESGO MODERADO:")
            moderateRiskFactors.forEach { analysis.add("‚Ä¢ $it") }
            analysis.add("")
        }

        if (highRiskFactors.isEmpty() && moderateRiskFactors.isEmpty()) {
            analysis.add("‚úÖ Sin factores de riesgo significativos identificados")
            analysis.add("")
        }

        // Priority interventions based on risk factors
        analysis.add("üéØ INTERVENCIONES PRIORITARIAS:")
        if (sensory <= 2 || mobility <= 2) {
            analysis.add("‚Ä¢ PRIORIDAD ALTA: Cambios posturales frecuentes")
        }
        if (moisture <= 2) {
            analysis.add("‚Ä¢ PRIORIDAD ALTA: Control de humedad")
        }
        if (nutrition <= 2) {
            analysis.add("‚Ä¢ PRIORIDAD ALTA: Evaluaci√≥n nutricional")
        }
        if (friction <= 1) {
            analysis.add("‚Ä¢ PRIORIDAD ALTA: T√©cnicas de movilizaci√≥n segura")
        }

        return analysis.joinToString("\n")
    }

    override fun getInterpretation(result: CalculationResult): String {
        val totalScore = result.resultValues["total_score"] ?: ""
        val riskLevel = result.resultValues["risk_level"] ?: ""
        val riskInterpretation = result.resultValues["risk_interpretation"] ?: ""

        return """
INTERPRETACI√ìN CL√çNICA - ESCALA DE BRADEN

PUNTUACI√ìN TOTAL: $totalScore/23 puntos
NIVEL DE RIESGO: $riskLevel
EVALUACI√ìN: $riskInterpretation

RANGOS DE PUNTUACI√ìN:
‚Ä¢ 19-23 puntos: Sin riesgo
‚Ä¢ 15-18 puntos: Riesgo leve  
‚Ä¢ 13-14 puntos: Riesgo moderado
‚Ä¢ 10-12 puntos: Riesgo alto
‚Ä¢ ‚â§9 puntos: Riesgo muy alto

COMPONENTES EVALUADOS:
‚Ä¢ Percepci√≥n sensorial (1-4 puntos)
‚Ä¢ Exposici√≥n a humedad (1-4 puntos)  
‚Ä¢ Actividad (1-4 puntos)
‚Ä¢ Movilidad (1-4 puntos)
‚Ä¢ Nutrici√≥n (1-4 puntos)
‚Ä¢ Fricci√≥n y deslizamiento (1-3 puntos)

VALIDEZ CL√çNICA:
La Escala de Braden es el instrumento m√°s utilizado mundialmente para predecir el riesgo de desarrollar √∫lceras por presi√≥n. Ha demostrado alta sensibilidad (83-100%) y especificidad (64-90%) en diversos estudios.

LIMITACIONES:
‚Ä¢ No considera factores como medicamentos, comorbilidades espec√≠ficas
‚Ä¢ Requiere evaluaci√≥n cl√≠nica complementaria
‚Ä¢ Debe combinarse con juicio cl√≠nico profesional
        """.trimIndent()
    }

    override fun getReferences(): List<Reference> {
        return listOf(
            Reference(
                title = "Gu√≠a de Pr√°ctica Cl√≠nica para la Prevenci√≥n y Tratamiento de √ölceras por Presi√≥n",
                source = "Secretar√≠a de Salud M√©xico",
                url = "http://gpc.salud.gob.mx"
            ),
            Reference(
                title = "Escala de Braden para Evaluaci√≥n de Riesgo",
                source = "Instituto Mexicano del Seguro Social (IMSS)",
                year = 2023
            ),
            Reference(
                title = "Prevenci√≥n de √ölceras por Presi√≥n en Hospitalizaci√≥n",
                source = "Revista Mexicana de Enfermer√≠a",
                year = 2022
            ),
            Reference(
                title = "Braden Scale for Predicting Pressure Sore Risk",
                source = "Braden & Bergstrom, 1987 - Validated tool",
                year = 1987
            ),
            Reference(
                title = "Protocolo de Prevenci√≥n de UPP",
                source = "Hospital General de M√©xico",
                year = 2023
            )
        )
    }
}