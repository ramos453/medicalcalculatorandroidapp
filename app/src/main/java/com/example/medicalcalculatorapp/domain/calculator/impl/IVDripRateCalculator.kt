package com.example.medicalcalculatorapp.domain.calculator.impl

import com.example.medicalcalculatorapp.domain.calculator.Calculator
import com.example.medicalcalculatorapp.domain.calculator.Reference
import com.example.medicalcalculatorapp.domain.calculator.ValidationResult
import com.example.medicalcalculatorapp.domain.model.CalculationResult
import kotlin.math.round

class IVDripRateCalculator : Calculator {

    override val calculatorId = "iv_drip_rate"

    // Drop factors for different equipment types
    private val dropFactors = mapOf(
        "10 gtt/mL" to 10.0,
        "15 gtt/mL" to 15.0,
        "20 gtt/mL" to 20.0,
        "60 gtt/mL (microgotero)" to 60.0
    )

    // Safe flow rate limits (mL/h) for different patient populations
    private val safeFlowRateLimits = mapOf(
        "adult_normal" to 250.0,
        "adult_cardiac" to 125.0,
        "elderly" to 100.0,
        "pediatric" to 50.0
    )

    override fun validate(inputs: Map<String, String>): ValidationResult {
        val errors = mutableListOf<String>()

        // Validate total volume
        val volumeStr = inputs["total_volume"]
        if (volumeStr.isNullOrBlank()) {
            errors.add("El volumen total es obligatorio")
        } else {
            val volume = volumeStr.toDoubleOrNull()
            if (volume == null) {
                errors.add("El volumen debe ser un n√∫mero v√°lido")
            } else if (volume <= 0) {
                errors.add("El volumen debe ser mayor que cero")
            } else if (volume > 5000.0) {
                errors.add("El volumen excede el l√≠mite m√°ximo (5000 mL)")
            }
        }

        // Validate infusion time
        val timeStr = inputs["infusion_time_hours"]
        if (timeStr.isNullOrBlank()) {
            errors.add("El tiempo de infusi√≥n es obligatorio")
        } else {
            val time = timeStr.toDoubleOrNull()
            if (time == null) {
                errors.add("El tiempo debe ser un n√∫mero v√°lido")
            } else if (time <= 0) {
                errors.add("El tiempo debe ser mayor que cero")
            } else if (time > 48.0) {
                errors.add("El tiempo excede el l√≠mite m√°ximo (48 horas)")
            }
        }

        // Validate drop factor
        val dropFactor = inputs["drop_factor"]
        if (dropFactor.isNullOrBlank()) {
            errors.add("El factor de goteo es obligatorio")
        } else if (!dropFactors.containsKey(dropFactor)) {
            errors.add("Factor de goteo inv√°lido")
        }

        // Validate patient weight if provided
        val weightStr = inputs["patient_weight"]
        if (!weightStr.isNullOrBlank()) {
            val weight = weightStr.toDoubleOrNull()
            if (weight == null || weight <= 0 || weight > 200.0) {
                errors.add("El peso debe ser un n√∫mero v√°lido entre 1-200 kg")
            }
        }

        return ValidationResult(
            isValid = errors.isEmpty(),
            errors = errors
        )
    }

    override fun calculate(inputs: Map<String, String>): CalculationResult {
        val validation = validate(inputs)
        if (!validation.isValid) {
            throw IllegalArgumentException(validation.errors.joinToString("; "))
        }

        // Parse inputs
        val volume = inputs["total_volume"]!!.toDouble()
        val timeHours = inputs["infusion_time_hours"]!!.toDouble()
        val dropFactorKey = inputs["drop_factor"]!!
        val dropFactorValue = dropFactors[dropFactorKey]!!
        val fluidType = inputs["fluid_type"] ?: "Soluci√≥n Salina 0.9%"
        val patientWeight = inputs["patient_weight"]?.toDoubleOrNull()

        // Calculate flow rate (mL/h)
        val flowRate = volume / timeHours

        // Calculate time in minutes
        val timeMinutes = timeHours * 60

        // Calculate drip rate (gtt/min)
        val dripRate = (volume * dropFactorValue) / timeMinutes

        // Calculate drops in 15 seconds (practical for nurses)
        val dropsIn15Seconds = dripRate / 4.0

        // Format duration
        val duration = formatDuration(timeHours)

        // Generate safety warnings and monitoring guidelines
        val safetyWarnings = generateSafetyWarnings(flowRate, dripRate, fluidType, patientWeight)
        val monitoringGuidelines = generateMonitoringGuidelines(fluidType, flowRate, timeHours)

        // Format results
        val results = mapOf(
            "drip_rate" to String.format("%.1f", dripRate),
            "flow_rate" to String.format("%.1f", flowRate),
            "drops_per_15_seconds" to String.format("%.1f", dropsIn15Seconds),
            "infusion_duration" to duration,
            "safety_warnings" to safetyWarnings,
            "monitoring_guidelines" to monitoringGuidelines
        )

        return CalculationResult(
            calculatorId = calculatorId,
            inputValues = inputs,
            resultValues = results
        )
    }

    private fun formatDuration(hours: Double): String {
        val wholeHours = hours.toInt()
        val minutes = ((hours - wholeHours) * 60).toInt()

        return when {
            wholeHours == 0 -> "${minutes} minutos"
            minutes == 0 -> "${wholeHours} hora${if (wholeHours > 1) "s" else ""}"
            else -> "${wholeHours}h ${minutes}min"
        }
    }

    private fun generateSafetyWarnings(
        flowRate: Double,
        dripRate: Double,
        fluidType: String,
        patientWeight: Double?
    ): String {
        val warnings = mutableListOf<String>()

        // Flow rate warnings
        when {
            flowRate > 300.0 -> warnings.add("‚ö†Ô∏è VELOCIDAD MUY ALTA - Riesgo de sobrecarga circulatoria")
            flowRate > 200.0 -> warnings.add("‚ö†Ô∏è VELOCIDAD ALTA - Monitoreo cardiopulmonar estrecho")
            flowRate < 10.0 -> warnings.add("‚ö†Ô∏è VELOCIDAD MUY LENTA - Verificar permeabilidad")
        }

        // Drip rate practical warnings
        when {
            dripRate > 60.0 -> warnings.add("‚ö†Ô∏è GOTEO MUY R√ÅPIDO - Dif√≠cil de contar manualmente")
            dripRate < 5.0 -> warnings.add("‚ö†Ô∏è GOTEO MUY LENTO - Riesgo de coagulaci√≥n")
        }

        // Fluid-specific warnings
        when {
            fluidType.contains("Dextrosa") && flowRate > 150.0 ->
                warnings.add("‚ö†Ô∏è DEXTROSA R√ÅPIDA - Monitorear glucemia")
            fluidType.contains("Sangre") && flowRate > 100.0 ->
                warnings.add("‚ö†Ô∏è HEMODERIVADOS - Velocidad m√°xima excedida")
            fluidType.contains("Medicamento") ->
                warnings.add("‚ö†Ô∏è MEDICAMENTO DILUIDO - Verificar compatibilidad")
        }

        // Weight-based warnings
        patientWeight?.let { weight ->
            val mlPerKgPerHour = flowRate / weight
            when {
                weight < 20.0 && flowRate > 50.0 ->
                    warnings.add("‚ö†Ô∏è PACIENTE PEDI√ÅTRICO - Velocidad alta para el peso")
                weight > 80.0 && mlPerKgPerHour > 3.0 ->
                    warnings.add("‚ö†Ô∏è ALTA VELOCIDAD POR PESO - Monitoreo intensivo")

                else -> {}
            }
        }

        if (warnings.isEmpty()) {
            warnings.add("‚úÖ Par√°metros dentro de rangos seguros")
        }

        warnings.add("‚ö†Ô∏è Verificar permeabilidad de cat√©ter antes de iniciar")
        warnings.add("‚ö†Ô∏è Confirmar indicaci√≥n m√©dica y velocidad prescrita")

        return warnings.joinToString("\n")
    }

    private fun generateMonitoringGuidelines(
        fluidType: String,
        flowRate: Double,
        timeHours: Double
    ): String {
        val guidelines = mutableListOf<String>()

        // General monitoring
        guidelines.add("üìä SIGNOS VITALES cada 2-4 horas")
        guidelines.add("üìä BALANCE H√çDRICO estricto")
        guidelines.add("üìä SITIO DE PUNCI√ìN cada hora")

        // Flow rate specific monitoring
        when {
            flowRate > 200.0 -> {
                guidelines.add("üìä MONITOREO CARDIACO continuo")
                guidelines.add("üìä SATURACI√ìN DE OX√çGENO continua")
                guidelines.add("üìä SIGNOS DE SOBRECARGA cada 30 min")
            }
            flowRate > 100.0 -> {
                guidelines.add("üìä SIGNOS DE SOBRECARGA cada hora")
                guidelines.add("üìä AUSCULTACI√ìN PULMONAR cada 2h")
            }
        }

        // Fluid-specific monitoring
        when {
            fluidType.contains("Dextrosa") -> {
                guidelines.add("üìä GLUCEMIA cada 4-6 horas")
                guidelines.add("üìä SIGNOS DE HIPERGLUCEMIA")
            }
            fluidType.contains("Salina") -> {
                guidelines.add("üìä ELECTROLITOS s√©ricos diarios")
                guidelines.add("üìä SIGNOS DE HIPERNATREMIA")
            }
            fluidType.contains("Lactato") -> {
                guidelines.add("üìä ESTADO √ÅCIDO-BASE")
                guidelines.add("üìä FUNCI√ìN RENAL")
            }
            fluidType.contains("Sangre") -> {
                guidelines.add("üìä REACCIONES TRANSFUSIONALES")
                guidelines.add("üìä TEMPERATURA cada 15 min primera hora")
                guidelines.add("üìä HEMOGLOBINA post-transfusi√≥n")
            }
        }

        // Time-based monitoring
        if (timeHours > 24.0) {
            guidelines.add("üìä EVALUACI√ìN NUTRICIONAL diaria")
            guidelines.add("üìä FUNCI√ìN RENAL cada 24h")
        }

        guidelines.add("üìä DOCUMENTAR volumen administrado cada turno")
        guidelines.add("üìä VERIFICAR bomba de infusi√≥n si disponible")

        return guidelines.joinToString("\n")
    }

    override fun getInterpretation(result: CalculationResult): String {
        val dripRate = result.resultValues["drip_rate"] ?: ""
        val flowRate = result.resultValues["flow_rate"] ?: ""
        val drops15Sec = result.resultValues["drops_per_15_seconds"] ?: ""
        val duration = result.resultValues["infusion_duration"] ?: ""
        val volume = result.inputValues["total_volume"] ?: ""
        val dropFactor = result.inputValues["drop_factor"] ?: ""

        return """
INTERPRETACI√ìN CL√çNICA - VELOCIDAD DE GOTEO IV

üíß RESULTADOS PRINCIPALES:
‚Ä¢ Velocidad de goteo: $dripRate gtt/min
‚Ä¢ Velocidad de flujo: $flowRate mL/h
‚Ä¢ Gotas en 15 segundos: $drops15Sec gtt
‚Ä¢ Duraci√≥n total: $duration

üìã PAR√ÅMETROS DE C√ÅLCULO:
‚Ä¢ Volumen total: $volume mL
‚Ä¢ Factor de goteo: $dropFactor
‚Ä¢ Duraci√≥n programada: $duration

üî¨ F√ìRMULAS UTILIZADAS:
‚Ä¢ Goteo (gtt/min) = (Volumen √ó Factor) √∑ Tiempo(min)
‚Ä¢ Flujo (mL/h) = Volumen √∑ Tiempo(h)
‚Ä¢ Conteo 15 seg = Goteo √∑ 4

‚ö†Ô∏è VERIFICACIONES OBLIGATORIAS:
‚Ä¢ Confirmar PRESCRIPCI√ìN M√âDICA exacta
‚Ä¢ Verificar FACTOR DE GOTEO del equipo
‚Ä¢ Comprobar PERMEABILIDAD del cat√©ter
‚Ä¢ Ajustar bomba de infusi√≥n si disponible

üìä T√âCNICA DE CONTEO:
‚Ä¢ Contar gotas durante 15 segundos
‚Ä¢ Multiplicar por 4 para obtener gtt/min
‚Ä¢ Ajustar manualmente la llave de paso
‚Ä¢ Verificar cada 30-60 minutos

üè• PROTOCOLOS MEXICANOS:
‚Ä¢ Basado en est√°ndares Roosevelt Hospital
‚Ä¢ Factores de goteo validados cl√≠nicamente
‚Ä¢ L√≠mites de seguridad por poblaci√≥n
‚Ä¢ Monitoreo seg√∫n tipo de fluido
        """.trimIndent()
    }

    override fun getReferences(): List<Reference> {
        return listOf(
            Reference(
                title = "C√°lculo de Goteo Intravenoso",
                source = "Blog Roosevelt Hospital M√©xico",
                url = "https://blog.roosevelt.edu.mx"
            ),
            Reference(
                title = "Administraci√≥n de Fluidos Intravenosos",
                source = "Sociedad Mexicana de Enfermer√≠a",
                year = 2023
            ),
            Reference(
                title = "IV Flow Rate Calculations",
                source = "Nursing Drug Calculations",
                year = 2022
            ),
            Reference(
                title = "Factores de Goteo Estandarizados",
                source = "Manual de Procedimientos de Enfermer√≠a",
                year = 2023
            ),
            Reference(
                title = "Seguridad en Terapia Intravenosa",
                source = "Instituto Mexicano del Seguro Social",
                year = 2022
            )
        )
    }
}