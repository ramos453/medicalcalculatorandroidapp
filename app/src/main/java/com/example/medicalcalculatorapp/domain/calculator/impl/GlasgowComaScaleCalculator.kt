package com.example.medicalcalculatorapp.domain.calculator.impl

import com.example.medicalcalculatorapp.domain.calculator.Calculator
import com.example.medicalcalculatorapp.domain.calculator.Reference
import com.example.medicalcalculatorapp.domain.calculator.ValidationResult
import com.example.medicalcalculatorapp.domain.model.CalculationResult

class GlasgowComaScaleCalculator : Calculator {

    override val calculatorId = "glasgow_coma_scale"

    // Glasgow Coma Scale component definitions
    private val eyeResponseScores = mapOf(
        1 to "No abre los ojos",
        2 to "Abre los ojos al dolor",
        3 to "Abre los ojos a la voz",
        4 to "Abre los ojos espont√°neamente"
    )

    private val verbalResponseScores = mapOf(
        1 to "No respuesta verbal",
        2 to "Sonidos incomprensibles",
        3 to "Palabras inapropiadas",
        4 to "Confuso",
        5 to "Orientado"
    )

    private val motorResponseScores = mapOf(
        1 to "No respuesta motora",
        2 to "Extensi√≥n anormal (descerebraci√≥n)",
        3 to "Flexi√≥n anormal (decorticaci√≥n)",
        4 to "Flexi√≥n de retirada",
        5 to "Localiza el dolor",
        6 to "Obedece √≥rdenes"
    )

    override fun validate(inputs: Map<String, String>): ValidationResult {
        val errors = mutableListOf<String>()

        // Validate eye response
        val eyeStr = inputs["eye_response"]
        if (eyeStr.isNullOrBlank()) {
            errors.add("La respuesta ocular es obligatoria")
        } else {
            val eyeScore = eyeStr.toIntOrNull()
            if (eyeScore == null || eyeScore !in 1..4) {
                errors.add("La respuesta ocular debe estar entre 1-4")
            }
        }

        // Validate verbal response
        val verbalStr = inputs["verbal_response"]
        if (verbalStr.isNullOrBlank()) {
            errors.add("La respuesta verbal es obligatoria")
        } else {
            val verbalScore = verbalStr.toIntOrNull()
            if (verbalScore == null || verbalScore !in 1..5) {
                errors.add("La respuesta verbal debe estar entre 1-5")
            }
        }

        // Validate motor response
        val motorStr = inputs["motor_response"]
        if (motorStr.isNullOrBlank()) {
            errors.add("La respuesta motora es obligatoria")
        } else {
            val motorScore = motorStr.toIntOrNull()
            if (motorScore == null || motorScore !in 1..6) {
                errors.add("La respuesta motora debe estar entre 1-6")
            }
        }

        // Validate patient age if provided
        val ageStr = inputs["patient_age"]
        if (!ageStr.isNullOrBlank()) {
            val age = ageStr.toDoubleOrNull()
            if (age == null || age < 0 || age > 120) {
                errors.add("La edad debe estar entre 0-120 a√±os")
            }
        }

        return ValidationResult(
            isValid = errors.isEmpty(),
            errors = errors
        )
    }

    override fun calculate(inputs: Map<String, String>): CalculationResult {
        val validation = validate(inputs)
        if (!validation.isValid) {
            throw IllegalArgumentException(validation.errors.joinToString("; "))
        }

        // Parse inputs
        val eyeResponse = inputs["eye_response"]!!.toInt()
        val verbalResponse = inputs["verbal_response"]!!.toInt()
        val motorResponse = inputs["motor_response"]!!.toInt()

        // Optional patient information
        val patientAge = inputs["patient_age"]?.toDoubleOrNull()
        val isIntubated = inputs["is_intubated"] == "true"
        val hasSeizures = inputs["has_seizures"] == "true"
        val traumaticBrainInjury = inputs["traumatic_brain_injury"] == "true"
        val drugsAlcohol = inputs["drugs_alcohol"] == "true"
        val clinicalContext = inputs["clinical_context"] ?: "Evaluaci√≥n General"

        // Calculate total score
        val totalScore = eyeResponse + verbalResponse + motorResponse

        // Determine consciousness level
        val consciousnessLevel = determineConsciousnessLevel(totalScore)
        val neurologicalInterpretation = interpretNeurologicalStatus(
            totalScore, consciousnessLevel, eyeResponse, verbalResponse, motorResponse
        )

        // Generate detailed assessment
        val detailedAssessment = generateDetailedAssessment(
            eyeResponse, verbalResponse, motorResponse, isIntubated
        )

        // Generate clinical recommendations
        val clinicalRecommendations = generateClinicalRecommendations(
            totalScore, consciousnessLevel, traumaticBrainInjury, hasSeizures, clinicalContext
        )

        // Generate monitoring protocol
        val monitoringProtocol = generateMonitoringProtocol(
            totalScore, consciousnessLevel, traumaticBrainInjury, clinicalContext
        )

        // Generate prognostic indicators
        val prognosticIndicators = generatePrognosticIndicators(
            totalScore, eyeResponse, motorResponse, patientAge, traumaticBrainInjury
        )

        // Generate emergency alerts
        val emergencyAlerts = generateEmergencyAlerts(
            totalScore, eyeResponse, verbalResponse, motorResponse, isIntubated
        )

        // Format results
        val results = mapOf(
            "total_score" to totalScore.toString(),
            "consciousness_level" to consciousnessLevel,
            "neurological_interpretation" to neurologicalInterpretation,
            "detailed_assessment" to detailedAssessment,
            "clinical_recommendations" to clinicalRecommendations,
            "monitoring_protocol" to monitoringProtocol,
            "prognostic_indicators" to prognosticIndicators,
            "emergency_alerts" to emergencyAlerts
        )

        return CalculationResult(
            calculatorId = calculatorId,
            inputValues = inputs,
            resultValues = results
        )
    }

    private fun determineConsciousnessLevel(score: Int): String {
        return when (score) {
            15 -> "Conciencia plena"
            in 13..14 -> "Confusi√≥n leve"
            in 9..12 -> "Estado moderado"
            in 3..8 -> "Estado grave / Coma"
            else -> "Puntuaci√≥n inv√°lida"
        }
    }

    private fun interpretNeurologicalStatus(
        totalScore: Int, level: String, eye: Int, verbal: Int, motor: Int
    ): String {
        return when (level) {
            "Conciencia plena" -> "‚úÖ ESTADO NEUROL√ìGICO NORMAL - Paciente completamente alerta y orientado. Funciones neurol√≥gicas preservadas."
            "Confusi√≥n leve" -> "üü° ALTERACI√ìN LEVE - Paciente confuso pero consciente. Requiere evaluaci√≥n de causa subyacente."
            "Estado moderado" -> "üü† ALTERACI√ìN MODERADA - Deterioro significativo del estado de conciencia. Monitoreo neurol√≥gico intensivo."
            "Estado grave / Coma" -> "üö® ESTADO CR√çTICO - Coma o estado vegetativo. Requiere manejo en UCI y medidas de soporte vital."
            else -> "Estado no clasificable"
        }
    }

    private fun generateDetailedAssessment(
        eye: Int, verbal: Int, motor: Int, isIntubated: Boolean
    ): String {
        val assessment = mutableListOf<String>()

        assessment.add("üìä EVALUACI√ìN DETALLADA POR COMPONENTE:")
        assessment.add("")

        // Eye response assessment
        assessment.add("üëÅÔ∏è RESPUESTA OCULAR ($eye/4):")
        assessment.add("‚Ä¢ ${eyeResponseScores[eye] ?: "Valor no v√°lido"}")
        when (eye) {
            1 -> assessment.add("‚Ä¢ ‚ö†Ô∏è ALERTA CR√çTICA - No apertura ocular")
            2 -> assessment.add("‚Ä¢ ‚ö†Ô∏è RESPUESTA AL DOLOR solamente")
            3 -> assessment.add("‚Ä¢ ‚ö†Ô∏è Requiere est√≠mulo verbal")
            4 -> assessment.add("‚Ä¢ ‚úÖ Respuesta ocular normal")
        }
        assessment.add("")

        // Verbal response assessment
        assessment.add("üó£Ô∏è RESPUESTA VERBAL ($verbal/5):")
        if (isIntubated) {
            assessment.add("‚Ä¢ PACIENTE INTUBADO - Evaluaci√≥n verbal no aplicable")
            assessment.add("‚Ä¢ ‚ö†Ô∏è Usar GCS modificado para pacientes intubados")
        } else {
            assessment.add("‚Ä¢ ${verbalResponseScores[verbal] ?: "Valor no v√°lido"}")
            when (verbal) {
                1 -> assessment.add("‚Ä¢ üö® ALERTA CR√çTICA - Sin respuesta verbal")
                2 -> assessment.add("‚Ä¢ ‚ö†Ô∏è Solo sonidos, sin palabras reconocibles")
                3 -> assessment.add("‚Ä¢ ‚ö†Ô∏è Palabras sin coherencia")
                4 -> assessment.add("‚Ä¢ ‚ö†Ô∏è Confusi√≥n pero respuesta verbal presente")
                5 -> assessment.add("‚Ä¢ ‚úÖ Respuesta verbal normal y orientada")
            }
        }
        assessment.add("")

        // Motor response assessment
        assessment.add("ü§≤ RESPUESTA MOTORA ($motor/6):")
        assessment.add("‚Ä¢ ${motorResponseScores[motor] ?: "Valor no v√°lido"}")
        when (motor) {
            1 -> assessment.add("‚Ä¢ üö® ALERTA CR√çTICA - Sin respuesta motora")
            2 -> assessment.add("‚Ä¢ üö® DESCEREBRACI√ìN - Lesi√≥n del tronco encef√°lico")
            3 -> assessment.add("‚Ä¢ üö® DECORTICACI√ìN - Lesi√≥n cortical/subcortical")
            4 -> assessment.add("‚Ä¢ ‚ö†Ô∏è Retirada al dolor - funci√≥n motora b√°sica")
            5 -> assessment.add("‚Ä¢ ‚ö†Ô∏è Localiza dolor - funci√≥n motora parcial")
            6 -> assessment.add("‚Ä¢ ‚úÖ Obedece √≥rdenes - funci√≥n motora normal")
        }

        return assessment.joinToString("\n")
    }

    private fun generateClinicalRecommendations(
        totalScore: Int, level: String, traumaticBrainInjury: Boolean,
        hasSeizures: Boolean, clinicalContext: String
    ): String {
        val recommendations = mutableListOf<String>()

        recommendations.add("üè• RECOMENDACIONES CL√çNICAS ESPEC√çFICAS:")
        recommendations.add("")

        when (level) {
            "Conciencia plena" -> {
                recommendations.add("‚úÖ MANEJO EST√ÅNDAR:")
                recommendations.add("‚Ä¢ Observaci√≥n cl√≠nica de rutina")
                recommendations.add("‚Ä¢ Evaluaci√≥n neurol√≥gica cada 4 horas")
                recommendations.add("‚Ä¢ Investigar causa de consulta neurol√≥gica")
                recommendations.add("‚Ä¢ Alta m√©dica si no hay otras complicaciones")
            }
            "Confusi√≥n leve" -> {
                recommendations.add("üü° EVALUACI√ìN DIRIGIDA:")
                recommendations.add("‚Ä¢ Evaluaci√≥n neurol√≥gica cada 2 horas")
                recommendations.add("‚Ä¢ Investigar causas metab√≥licas (glucosa, electrolitos)")
                recommendations.add("‚Ä¢ Considerar TAC de cr√°neo simple")
                recommendations.add("‚Ä¢ Evaluar medicamentos y t√≥xicos")
                recommendations.add("‚Ä¢ Monitoreo de signos vitales")
            }
            "Estado moderado" -> {
                recommendations.add("üü† MANEJO INTENSIVO:")
                recommendations.add("‚Ä¢ UCI o √°rea de cuidados intensivos")
                recommendations.add("‚Ä¢ TAC de cr√°neo urgente")
                recommendations.add("‚Ä¢ Evaluaci√≥n neurol√≥gica cada hora")
                recommendations.add("‚Ä¢ Protecci√≥n de v√≠a a√©rea")
                recommendations.add("‚Ä¢ Prevenci√≥n de aspiraci√≥n")
                recommendations.add("‚Ä¢ Consulta neuroquir√∫rgica")
            }
            "Estado grave / Coma" -> {
                recommendations.add("üö® MEDIDAS DE EMERGENCIA:")
                recommendations.add("‚Ä¢ UCI inmediatamente")
                recommendations.add("‚Ä¢ Intubaci√≥n orotraqueal si indicado")
                recommendations.add("‚Ä¢ TAC de cr√°neo STAT")
                recommendations.add("‚Ä¢ Monitoreo de presi√≥n intracraneal")
                recommendations.add("‚Ä¢ Consulta neuroquir√∫rgica urgente")
                recommendations.add("‚Ä¢ Protocolo de coma")
                recommendations.add("‚Ä¢ Considerar traslado a centro especializado")
            }
        }

        // Specific conditions
        if (traumaticBrainInjury) {
            recommendations.add("")
            recommendations.add("üß† TRAUMATISMO CRANEOENCEF√ÅLICO:")
            recommendations.add("‚Ä¢ Inmovilizaci√≥n cervical hasta descartar lesi√≥n")
            recommendations.add("‚Ä¢ Protocolo de trauma craneal")
            recommendations.add("‚Ä¢ Prevenir hipertensi√≥n intracraneal")
            recommendations.add("‚Ä¢ Evitar hipotensi√≥n e hipoxia")
        }

        if (hasSeizures) {
            recommendations.add("")
            recommendations.add("‚ö° ACTIVIDAD CONVULSIVA:")
            recommendations.add("‚Ä¢ Protocolo de status epil√©ptico")
            recommendations.add("‚Ä¢ Anticonvulsivantes seg√∫n protocolo")
            recommendations.add("‚Ä¢ EEG si disponible")
            recommendations.add("‚Ä¢ Monitoreo continuo")
        }

        // Context-specific recommendations
        when (clinicalContext) {
            "Urgencias" -> {
                recommendations.add("")
                recommendations.add("üöë PROTOCOLO DE URGENCIAS:")
                recommendations.add("‚Ä¢ Evaluaci√≥n ABCDE completa")
                recommendations.add("‚Ä¢ Estabilizaci√≥n hemodin√°mica")
                recommendations.add("‚Ä¢ Descartar otras lesiones")
            }
            "Postoperatorio" -> {
                recommendations.add("")
                recommendations.add("üî¨ CUIDADOS POSTOPERATORIOS:")
                recommendations.add("‚Ä¢ Evaluar complicaciones quir√∫rgicas")
                recommendations.add("‚Ä¢ Monitoreo de sangrado intracraneal")
                recommendations.add("‚Ä¢ Manejo del dolor postoperatorio")
            }
            "UCI" -> {
                recommendations.add("")
                recommendations.add("üè• MANEJO EN UCI:")
                recommendations.add("‚Ä¢ Sedoanalgesia controlada")
                recommendations.add("‚Ä¢ Prevenci√≥n de √∫lceras por estr√©s")
                recommendations.add("‚Ä¢ Fisioterapia respiratoria")
            }
        }

        return recommendations.joinToString("\n")
    }

    private fun generateMonitoringProtocol(
        totalScore: Int, level: String, traumaticBrainInjury: Boolean, clinicalContext: String
    ): String {
        val protocol = mutableListOf<String>()

        protocol.add("üìÖ PROTOCOLO DE MONITOREO NEUROL√ìGICO:")
        protocol.add("")

        when (level) {
            "Conciencia plena" -> {
                protocol.add("‚úÖ MONITOREO B√ÅSICO:")
                protocol.add("‚Ä¢ Glasgow cada 4 horas")
                protocol.add("‚Ä¢ Signos vitales cada 4 horas")
                protocol.add("‚Ä¢ Evaluaci√≥n pupilar cada turno")
                protocol.add("‚Ä¢ Documentaci√≥n en expediente")
            }
            "Confusi√≥n leve" -> {
                protocol.add("üü° MONITOREO ESTRECHO:")
                protocol.add("‚Ä¢ Glasgow cada 2 horas")
                protocol.add("‚Ä¢ Signos vitales cada 2 horas")
                protocol.add("‚Ä¢ Evaluaci√≥n pupilar cada 2 horas")
                protocol.add("‚Ä¢ Funci√≥n motora focal")
                protocol.add("‚Ä¢ Estado de agitaci√≥n/sedaci√≥n")
            }
            "Estado moderado" -> {
                protocol.add("üü† MONITOREO INTENSIVO:")
                protocol.add("‚Ä¢ Glasgow cada hora")
                protocol.add("‚Ä¢ Signos vitales cada 30 minutos")
                protocol.add("‚Ä¢ Evaluaci√≥n pupilar cada hora")
                protocol.add("‚Ä¢ Presi√≥n arterial media >80 mmHg")
                protocol.add("‚Ä¢ Saturaci√≥n O2 >95%")
                protocol.add("‚Ä¢ Diuresis cada hora")
            }
            "Estado grave / Coma" -> {
                protocol.add("üö® MONITOREO CR√çTICO:")
                protocol.add("‚Ä¢ Glasgow cada 15-30 minutos")
                protocol.add("‚Ä¢ Monitoreo hemodin√°mico continuo")
                protocol.add("‚Ä¢ Presi√≥n intracraneal si disponible")
                protocol.add("‚Ä¢ Gasometr√≠a arterial cada 4-6 horas")
                protocol.add("‚Ä¢ Balance h√≠drico estricto")
                protocol.add("‚Ä¢ Electrolitos s√©ricos cada 12 horas")
                protocol.add("‚Ä¢ Temperatura corporal continua")
            }
        }

        if (traumaticBrainInjury) {
            protocol.add("")
            protocol.add("üß† MONITOREO ESPECIALIZADO TCE:")
            protocol.add("‚Ä¢ Evaluaci√≥n de heridas externas")
            protocol.add("‚Ä¢ Signos de aumento de PIC")
            protocol.add("‚Ä¢ L√≠quido cefalorraqu√≠deo (otorrea/rinorrea)")
            protocol.add("‚Ä¢ TAC de control seg√∫n evoluci√≥n")
        }

        // Alert parameters
        protocol.add("")
        protocol.add("‚ö†Ô∏è PAR√ÅMETROS DE ALERTA:")
        protocol.add("‚Ä¢ Disminuci√≥n Glasgow ‚â•2 puntos")
        protocol.add("‚Ä¢ Cambios pupilares (anisocoria >1mm)")
        protocol.add("‚Ä¢ Deterioro motor unilateral")
        protocol.add("‚Ä¢ Signos de herniaci√≥n cerebral")
        protocol.add("‚Ä¢ V√≥mitos en proyectil")
        protocol.add("‚Ä¢ Bradicardia + hipertensi√≥n (Cushing)")

        return protocol.joinToString("\n")
    }

    private fun generatePrognosticIndicators(
        totalScore: Int, eyeResponse: Int, motorResponse: Int,
        age: Double?, traumaticBrainInjury: Boolean
    ): String {
        val indicators = mutableListOf<String>()

        indicators.add("üìà INDICADORES PRON√ìSTICOS:")
        indicators.add("")

        // Overall prognosis based on score
        when (totalScore) {
            15 -> {
                indicators.add("‚úÖ PRON√ìSTICO EXCELENTE")
                indicators.add("‚Ä¢ Recuperaci√≥n completa esperada")
                indicators.add("‚Ä¢ Riesgo m√≠nimo de complicaciones")
            }
            in 13..14 -> {
                indicators.add("üü° PRON√ìSTICO BUENO")
                indicators.add("‚Ä¢ Recuperaci√≥n probable con manejo apropiado")
                indicators.add("‚Ä¢ Monitoreo para prevenir deterioro")
            }
            in 9..12 -> {
                indicators.add("üü† PRON√ìSTICO RESERVADO")
                indicators.add("‚Ä¢ Recuperaci√≥n variable seg√∫n causa")
                indicators.add("‚Ä¢ Riesgo moderado de complicaciones")
                indicators.add("‚Ä¢ Requiere manejo especializado")
            }
            in 6..8 -> {
                indicators.add("üî¥ PRON√ìSTICO GRAVE")
                indicators.add("‚Ä¢ Alta morbimortalidad")
                indicators.add("‚Ä¢ Posibles secuelas neurol√≥gicas")
                indicators.add("‚Ä¢ Requiere cuidados intensivos")
            }
            in 3..5 -> {
                indicators.add("üö® PRON√ìSTICO MUY GRAVE")
                indicators.add("‚Ä¢ Mortalidad elevada (>50%)")
                indicators.add("‚Ä¢ Alto riesgo de secuelas permanentes")
                indicators.add("‚Ä¢ Considerar medidas de soporte vital")
            }
        }

        // Motor response prognostic value
        indicators.add("")
        indicators.add("ü§≤ VALOR PRON√ìSTICO MOTOR:")
        when (motorResponse) {
            6 -> indicators.add("‚Ä¢ ‚úÖ Mejor pron√≥stico - funci√≥n cortical preservada")
            5 -> indicators.add("‚Ä¢ üü° Buen pron√≥stico - localizaci√≥n del dolor")
            4 -> indicators.add("‚Ä¢ üü† Pron√≥stico moderado - respuesta de retirada")
            3 -> indicators.add("‚Ä¢ üî¥ Mal pron√≥stico - decorticaci√≥n")
            2 -> indicators.add("‚Ä¢ üö® Muy mal pron√≥stico - descerebraci√≥n")
            1 -> indicators.add("‚Ä¢ üö® Pron√≥stico cr√≠tico - sin respuesta motora")
        }

        // Age considerations
        age?.let {
            indicators.add("")
            indicators.add("üë§ FACTORES DE EDAD:")
            when {
                it < 40 -> indicators.add("‚Ä¢ ‚úÖ Edad joven - mejor capacidad de recuperaci√≥n")
                it < 65 -> indicators.add("‚Ä¢ üü° Edad adulta - pron√≥stico variable")
                it >= 65 -> indicators.add("‚Ä¢ üü† Edad avanzada - recuperaci√≥n m√°s lenta")
                it >= 80 -> indicators.add("‚Ä¢ üî¥ Edad muy avanzada - pron√≥stico reservado")
                else -> {}
            }
        }

        // Traumatic brain injury specific
        if (traumaticBrainInjury) {
            indicators.add("")
            indicators.add("üß† PRON√ìSTICO EN TCE:")
            indicators.add("‚Ä¢ Depende de mecanismo de lesi√≥n")
            indicators.add("‚Ä¢ Lesiones difusas vs focales")
            indicators.add("‚Ä¢ Tiempo hasta atenci√≥n m√©dica")
            indicators.add("‚Ä¢ Presencia de lesiones secundarias")
        }

        return indicators.joinToString("\n")
    }

    private fun generateEmergencyAlerts(
        totalScore: Int, eye: Int, verbal: Int, motor: Int, isIntubated: Boolean
    ): String {
        val alerts = mutableListOf<String>()

        // Critical score alerts
        if (totalScore <= 8) {
            alerts.add("üö® ALERTA CR√çTICA: Glasgow ‚â§8")
            alerts.add("‚Ä¢ COMA - Requiere manejo inmediato en UCI")
            alerts.add("‚Ä¢ Considerar intubaci√≥n orotraqueal")
            alerts.add("‚Ä¢ Consulta neuroquir√∫rgica URGENTE")
            alerts.add("")
        }

        if (totalScore <= 5) {
            alerts.add("üö® ALERTA M√ÅXIMA: Glasgow ‚â§5")
            alerts.add("‚Ä¢ ESTADO VEGETATIVO/COMA PROFUNDO")
            alerts.add("‚Ä¢ Medidas de soporte vital completo")
            alerts.add("‚Ä¢ Evaluaci√≥n pron√≥stica familiar")
            alerts.add("")
        }

        // Component-specific alerts
        if (eye == 1) {
            alerts.add("üëÅÔ∏è ALERTA OCULAR: Sin apertura de ojos")
            alerts.add("‚Ä¢ Posible lesi√≥n del tronco cerebral")
            alerts.add("‚Ä¢ Evaluar reflejos pupilares inmediatamente")
            alerts.add("")
        }

        if (verbal == 1 && !isIntubated) {
            alerts.add("üó£Ô∏è ALERTA VERBAL: Sin respuesta verbal")
            alerts.add("‚Ä¢ Descartar afasia vs disminuci√≥n del nivel de conciencia")
            alerts.add("‚Ä¢ Evaluar comprensi√≥n de √≥rdenes")
            alerts.add("")
        }

        if (motor <= 2) {
            alerts.add("ü§≤ ALERTA MOTORA CR√çTICA:")
            if (motor == 1) {
                alerts.add("‚Ä¢ Sin respuesta motora - lesi√≥n grave del SNC")
            } else {
                alerts.add("‚Ä¢ Postura de descerebraci√≥n - lesi√≥n del tronco")
            }
            alerts.add("‚Ä¢ TAC de cr√°neo inmediato")
            alerts.add("‚Ä¢ Manejo de presi√≥n intracraneal")
            alerts.add("")
        }

        if (motor == 3) {
            alerts.add("ü§≤ ALERTA MOTORA: Postura de decorticaci√≥n")
            alerts.add("‚Ä¢ Lesi√≥n cortical/subcortical")
            alerts.add("‚Ä¢ Monitoreo neurol√≥gico estrecho")
            alerts.add("")
        }

        // General alerts
        if (totalScore >= 13) {
            alerts.add("‚úÖ SIN ALERTAS CR√çTICAS")
            alerts.add("‚Ä¢ Continuar monitoreo de rutina")
            alerts.add("‚Ä¢ Investigar causa de alteraci√≥n si presente")
        }

        if (alerts.isEmpty()) {
            alerts.add("üìä Estado evaluado - Ver recomendaciones espec√≠ficas")
        }

        return alerts.joinToString("\n")
    }

    override fun getInterpretation(result: CalculationResult): String {
        val totalScore = result.resultValues["total_score"] ?: ""
        val level = result.resultValues["consciousness_level"] ?: ""
        val eyeScore = result.inputValues["eye_response"] ?: ""
        val verbalScore = result.inputValues["verbal_response"] ?: ""
        val motorScore = result.inputValues["motor_response"] ?: ""

        return """
INTERPRETACI√ìN CL√çNICA - ESCALA DE COMA DE GLASGOW

PUNTUACI√ìN TOTAL: $totalScore/15 puntos
NIVEL DE CONSCIENCIA: $level

COMPONENTES EVALUADOS:
‚Ä¢ Respuesta Ocular: $eyeScore/4 puntos
‚Ä¢ Respuesta Verbal: $verbalScore/5 puntos  
‚Ä¢ Respuesta Motora: $motorScore/6 puntos

RANGOS DE INTERPRETACI√ìN:
‚Ä¢ 15 puntos: Conciencia plena
‚Ä¢ 13-14 puntos: Confusi√≥n leve
‚Ä¢ 9-12 puntos: Estado moderado
‚Ä¢ 3-8 puntos: Estado grave / Coma

VALIDEZ CL√çNICA:
La Escala de Glasgow es el est√°ndar internacional para evaluar el nivel de consciencia y predecir pron√≥stico neurol√≥gico. Desarrollada en 1974, tiene alta confiabilidad inter-observador cuando se aplica correctamente.

CONSIDERACIONES ESPECIALES:
‚Ä¢ Pacientes intubados: Usar GCS modificado
‚Ä¢ Edema facial: Puede limitar evaluaci√≥n ocular
‚Ä¢ Sedaci√≥n/analgesia: Puede alterar las respuestas
‚Ä¢ Lesiones locales: Evaluar componentes no afectados

APLICACI√ìN CL√çNICA:
‚Ä¢ Evaluaci√≥n inicial y seriada en trauma
‚Ä¢ Monitoreo neurol√≥gico en UCI
‚Ä¢ Criterio para intubaci√≥n (GCS ‚â§8)
‚Ä¢ Predictor pron√≥stico en coma
        """.trimIndent()
    }

    override fun getReferences(): List<Reference> {
        return listOf(
            Reference(
                title = "Manual de Atenci√≥n Neurol√≥gica de Urgencia",
                source = "Instituto Nacional de Neurolog√≠a y Neurocirug√≠a (INNN)",
                year = 2023
            ),
            Reference(
                title = "Escala de Coma de Glasgow en Urgencias",
                source = "Sociedad Mexicana de Medicina de Emergencia",
                year = 2022
            ),
            Reference(
                title = "Gu√≠as de Manejo del Trauma Craneoencef√°lico",
                source = "Instituto Mexicano del Seguro Social (IMSS)",
                year = 2023
            ),
            Reference(
                title = "Assessment of coma and impaired consciousness",
                source = "Teasdale & Jennett, The Lancet 1974",
                year = 1974
            ),
            Reference(
                title = "Neurological Assessment in Critical Care",
                source = "American Association of Neuroscience Nurses",
                year = 2022
            )
        )
    }
}